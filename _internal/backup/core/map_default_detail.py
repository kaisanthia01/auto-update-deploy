import os
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import cartopy.feature as cfeature
from matplotlib.ticker import MultipleLocator
from cartopy.mpl.gridliner import LONGITUDE_FORMATTER, LATITUDE_FORMATTER
from PIL import Image
import numpy as np
import cartopy.io.shapereader as shpreader
from cartopy.feature import ShapelyFeature
import matplotlib.ticker as mticker
from cartopy.io import DownloadWarning
import warnings
import sys
import io
from matplotlib import font_manager as fm

# ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö stdout ‡πÄ‡∏õ‡πá‡∏ô utf-8 (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Windows)
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding="utf-8")

script_dir = os.path.dirname(os.path.abspath(__file__))  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå .py
logo_path = os.path.join(script_dir, "../../images/icons/sfc-2.png")
output_file = os.path.join(script_dir, "../../output/detail.png")
output_file_2 = os.path.join(script_dir, "../../output/detail.pdf")

# ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
paper_size = {"‡∏≠‡∏ï.‡∏ó‡∏≠.1003": (11.69, 16.54)}  # 420 √ó 297 mm

# === ‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û ===
dpi = 300
dpi_2 = 600
# width_px = 3507
# height_px = 4962
# width_in = width_px / dpi
# height_in = height_px / dpi

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
paper_key = "‡∏≠‡∏ï.‡∏ó‡∏≠.1003"  # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: "‡∏≠‡∏ï.‡∏ó‡∏≠.1003"
print(f"üìÑ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©: {paper_key}")

# ‡∏î‡∏∂‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
if paper_key in paper_size:
    width_in, height_in = paper_size[paper_key]
    print(f"üìè ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©: {width_in} x {height_in} ‡∏ô‡∏¥‡πâ‡∏ß")
else:
    raise ValueError(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©: {paper_key}")

# === ‡πÄ‡∏ß‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö ===
margin_in = 0.25
margin_x = margin_in / width_in
margin_y = margin_in / height_in

# === ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ===
fig = plt.figure(figsize=(width_in, height_in), dpi=dpi)

ax = fig.add_axes(
    [margin_x, margin_y, 1 - 2 * margin_x, 1 - 2 * margin_y],
    projection=ccrs.PlateCarree(),
)

# === ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï
# ‡∏ó‡∏¥‡∏®‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏∏‡πâ‡∏á -1.5 ‡∏≠‡∏á‡∏®‡∏≤‡πÄ‡∏´‡∏ô‡∏∑‡∏≠, ‡∏ó‡∏¥‡∏®‡πÉ‡∏ï‡πâ ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏∏‡πâ‡∏á 24.5 ‡∏≠‡∏á‡∏®‡∏≤‡πÉ‡∏ï‡πâ, ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ß‡∏á 111.2 ‡∏≠‡∏á‡∏®‡∏≤‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å, ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ß‡∏á 93 ‡∏≠‡∏á‡∏®‡∏≤‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å
ax.set_extent([93.0, 111.2, -1.5, 24.5], crs=ccrs.PlateCarree())

# === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
cartopy_data_path = None
if not cartopy_data_path:
    script_dir = os.path.dirname(os.path.abspath(__file__))  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå .py
    cartopy_data_path = os.path.join(script_dir, "../../data/cartopy")

# === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå shapefile ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
shapefiles_found = (
    any(
        fname.endswith((".shp", ".dbf", ".shx"))
        for fname in os.listdir(cartopy_data_path)
    )
    if os.path.isdir(cartopy_data_path)
    else False
)

# üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
if shapefiles_found:
    os.environ["CARTOPY_USER_BACKGROUNDS"] = cartopy_data_path
    os.environ["CARTOPY_USER_SHAPEFILES"] = cartopy_data_path
    print("‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á:", cartopy_data_path)
else:
    print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏°‡∏û‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‚Üí ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏à‡∏≤‡∏Å Natural Earth")


# === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏° ===
def _add_map_features(ax, cartopy_data_path):
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á, ‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô, ‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏∞‡πÄ‡∏•‡∏•‡∏á‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà"""
    boundary_path = os.path.join(
        cartopy_data_path, "ne_50m_admin_0_boundary_lines_land.shp"
    )
    coast_path = os.path.join(cartopy_data_path, "ne_50m_coastline.shp")
    countries_path = os.path.join(cartopy_data_path, "ne_110m_admin_0_countries.shp")
    marine_path = os.path.join(cartopy_data_path, "ne_10m_geography_marine_polys.shp")

    # ‚úÖ ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    ax.add_feature(cfeature.LAND, facecolor="navajowhite", alpha=0.1)  # ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô (‡∏™‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠)
    ax.add_feature(
        cfeature.OCEAN,
        facecolor="lightblue",
        alpha=0.1,
    )  # ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏ô‡πâ‡∏≥ (‡πÄ‡∏á‡∏¥‡∏ô‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡πà‡∏≠‡∏ô)

    try:
        # ‚úÖ ‡∏û‡∏•‡πá‡∏≠‡∏ï‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô (BORDERS)
        if os.path.exists(boundary_path):
            borders = shpreader.Reader(boundary_path)
            ax.add_geometries(
                borders.geometries(),
                crs=ccrs.PlateCarree(),
                edgecolor="#a3a3a3",
                facecolor="none",
                linewidth=0.2,
            )
        else:
            ax.add_feature(cfeature.BORDERS, linewidth=0.2, edgecolor="#a3a3a3")

    except Exception as e:
        print(f"‚ùå Failed to add borders: {e}")

    try:
        # ‚úÖ ‡∏û‡∏•‡πá‡∏≠‡∏ï‡πÅ‡∏ô‡∏ß‡∏ä‡∏≤‡∏¢‡∏ù‡∏±‡πà‡∏á (COASTLINE)
        if os.path.exists(coast_path):
            coast = shpreader.Reader(coast_path)
            ax.add_geometries(
                coast.geometries(),
                crs=ccrs.PlateCarree(),
                edgecolor="#a3a3a3",
                facecolor="none",
                linewidth=0.2,
            )
        else:
            ax.add_feature(cfeature.COASTLINE, linewidth=0.2, edgecolor="#a3a3a3")

    except Exception as e:
        print(f"‚ùå Failed to add coastline: {e}")

    try:
        # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        west, east, south, north = ax.get_extent(ccrs.PlateCarree())

        # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà)
        if os.path.exists(countries_path):
            reader = shpreader.Reader(countries_path)
            for country in reader.records():
                lon, lat = country.geometry.centroid.coords[0]
                name = country.attributes["NAME"]

                # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                if west + 2 <= lon <= east - 2 and south <= lat <= north:
                    ax.text(
                        lon,
                        lat,
                        name,
                        fontsize=5,
                        ha="center",
                        clip_on=True,  # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¢‡∏Ç‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                        transform=ccrs.PlateCarree(),
                        color="grey",
                        alpha=0.5,
                    )

    except Exception as e:
        print(f"‚ùå Failed to add country names: {e}")

    try:
        # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        west, east, south, north = ax.get_extent(ccrs.PlateCarree())

        # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏∞‡πÄ‡∏•, ‡∏≠‡πà‡∏≤‡∏ß, ‡πÅ‡∏•‡∏∞‡∏°‡∏´‡∏≤‡∏™‡∏°‡∏∏‡∏ó‡∏£
        if os.path.exists(marine_path):
            reader = shpreader.Reader(marine_path)
            for marine in reader.records():
                lon, lat = marine.geometry.centroid.coords[0]

                # ‚úÖ ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå keys ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏î‡∏π
                # print(marine.attributes.keys())

                # ‚úÖ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ key ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏∞‡πÄ‡∏•/‡∏≠‡πà‡∏≤‡∏ß
                name = marine.attributes.get("NAME", "") or marine.attributes.get(
                    "name", ""
                )

                if name and west <= lon <= east and south <= lat <= north:
                    ax.text(
                        lon,
                        lat,
                        name,
                        fontsize=1.5,
                        alpha=0.3,
                        color="darkblue",
                        ha="center",
                        clip_on=True,  # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                        transform=ccrs.PlateCarree(),
                    )

    except Exception as e:
        print(f"‚ùå Failed to add sea names: {e}")


def _add_default_features(ax):
    # ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
    print("üåê ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏°‡∏û‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‚Üí ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏à‡∏≤‡∏Å Natural Earth (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...)")

    # ‡∏õ‡∏¥‡∏î‡πÅ‡∏™‡∏î‡∏á warning ‡∏ã‡πâ‡∏≥ ‡πÜ
    warnings.simplefilter("default", DownloadWarning)

    ax.add_feature(cfeature.BORDERS, linewidth=0.2, edgecolor="#a3a3a3")
    ax.add_feature(cfeature.COASTLINE, linewidth=0.2, edgecolor="#a3a3a3")

    # ‚úÖ ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    ax.add_feature(cfeature.LAND, facecolor="navajowhite")  # ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô (‡∏™‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠)
    ax.add_feature(cfeature.OCEAN, facecolor="lightblue")  # ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏ô‡πâ‡∏≥ (‡πÄ‡∏á‡∏¥‡∏ô‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡πà‡∏≠‡∏ô)


def _add_thailand_borderline_only(ax, cartopy_data_path, linewidth=0.5):
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á polygon)"""
    # ‡πÇ‡∏´‡∏•‡∏î shapefile ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
    shapefile_path = os.path.join(cartopy_data_path, "ne_50m_admin_0_countries.shp")

    # ‡∏™‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô
    color = "darkgreen"

    try:
        reader = shpreader.Reader(shapefile_path)

        thailand_shape = [
            record.geometry
            for record in reader.records()
            if record.attributes.get("NAME") == "Thailand"
        ]

        if thailand_shape:
            border = ShapelyFeature(
                thailand_shape,
                ccrs.PlateCarree(),
                edgecolor=color,
                facecolor="none",
                linewidth=linewidth,
                zorder=6,
            )
            ax.add_feature(border)
        else:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô shapefile ‡∏ô‡∏µ‡πâ")

    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢: {e}")


def _add_inner_latlon_labels(ax, interval=5, color="black", fontsize=0.5):
    # ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏¥‡∏î (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
    gl = ax.gridlines(
        crs=ccrs.PlateCarree(),
        draw_labels=False,
        linewidth=0.5,
        color=color,
        alpha=0.5,
        linestyle="--",
        zorder=4,
    )
    gl.xlocator = mticker.MultipleLocator(interval)
    gl.ylocator = mticker.MultipleLocator(interval)

    # ‡∏î‡∏∂‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    extent = ax.get_extent(ccrs.PlateCarree())
    west, east, south, north = extent

    # ‡∏õ‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏£ interval ‡∏•‡∏á‡∏ï‡∏±‡∏ß
    def next_divisible_by(x, base):
        return x if x % base == 0 else x + (base - (x % base))

    lon_start = next_divisible_by(np.floor(west), interval)
    lat_start = next_divisible_by(np.floor(south), interval)

    lon_ticks = np.arange(lon_start, np.ceil(east) + interval, interval)
    lat_ticks = np.arange(lat_start, np.ceil(north) + interval, interval)

    # ‡∏£‡∏∞‡∏¢‡∏∞‡∏Ç‡∏¢‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö
    dx = (east - west) * 0.005
    dy = (north - south) * 0.015

    start = 0

    # ‡∏ß‡∏≤‡∏î label ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î (‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö)
    for lon in lon_ticks[start:-1]:
        if west <= lon <= east:
            y_pos = south + dy
            if south < y_pos < north:
                label = (
                    f"{abs(int(round(lon)))}¬∞E"
                    if lon >= 0
                    else f"{abs(int(round(lon)))}¬∞W"
                )
                ax.text(
                    lon + dx + 0.25,
                    y_pos - 0.25,
                    label,
                    fontsize=fontsize,
                    color="#AAAAAA",
                    ha="center",
                    va="bottom",
                    transform=ccrs.PlateCarree(),
                    # bbox=dict(facecolor="white", alpha=1.0, edgecolor="none"),
                    zorder=10,
                )

    # ‡∏ß‡∏≤‡∏î label ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î (‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏ã‡πâ‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö)
    for lat in lat_ticks[start:-1]:
        if south <= lat <= north:
            x_pos = west + dx
            if west < x_pos < east:
                label = (
                    f"{abs(int(round(lat)))}¬∞N"
                    if lat >= 0
                    else f"{abs(int(round(lat)))}¬∞S"
                )
                ax.text(
                    x_pos,
                    lat + 0.15,
                    label,
                    fontsize=fontsize,
                    color="#AAAAAA",
                    ha="left",
                    va="center",
                    transform=ccrs.PlateCarree(),
                    # bbox=dict(facecolor="white", alpha=1.0, edgecolor="none"),
                    zorder=10,
                )


# === ‡πÅ‡∏¢‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏û‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
if shapefiles_found:
    _add_map_features(ax, cartopy_data_path)
else:
    _add_default_features(ax)

# === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á polygon)
_add_thailand_borderline_only(ax, cartopy_data_path, linewidth=0.5)

# === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏¥‡∏î lat/lon
_add_inner_latlon_labels(ax, interval=5, color="gray", fontsize=7)

font_path = "fonts/Noto_Sans_Thai/static/NotoSansThai-Regular.ttf"
print(f"üìú ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å: {font_path}")

font = fm.FontProperties(fname=font_path)
print("üìõ ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤:", font.get_name())

# === ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ===
# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î 93.325, ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î -1.42
# ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á
ax.text(
    93.06,  # ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î (Longitude)
    -1.44,  # ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î (Latitude)
    f"Date: XX XXX XXXX Time: XXXX UTC | Detail Map",  # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    transform=ccrs.PlateCarree(),  # ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    fontsize=5,  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
    fontweight="bold",  # ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏≤
    color="black",  # ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    ha="left",  # ‡∏à‡∏±‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
    va="bottom",  # ‡∏à‡∏±‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
    bbox=dict(
        facecolor="white",
        edgecolor="black",
        linewidth=0.8,
        alpha=1,
        boxstyle="square,pad=0.5",
    ),  # ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    zorder=11,
)

# === ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ===
# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î 95.0, ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î -29.75
ax.text(
    99.0,  # ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î (Longitude)
    -2.0,  # ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î (Latitude)
    "XX XXX XXXX",  # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    transform=ccrs.PlateCarree(),  # ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    fontsize=32,  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
    fontweight="bold",  # ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏≤
    color="blue",  # ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    ha="center",  # ‡∏à‡∏±‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
    va="center",  # ‡∏à‡∏±‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
    zorder=11,
)

# === ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ===
# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î 105.0, ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î -29.75
ax.text(
    105.0,  # ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î (Longitude)
    -2.0,  # ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î (Latitude)
    "XXXX UTC",  # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    transform=ccrs.PlateCarree(),  # ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    fontsize=32,  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
    fontweight="bold",  # ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏≤
    color="red",  # ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    ha="center",  # ‡∏à‡∏±‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
    va="center",  # ‡∏à‡∏±‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
    zorder=11,
)


# DPI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö export ‡∏ä‡∏±‡∏î
plt.rcParams["savefig.dpi"] = 600

# === ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô PNG ===
plt.savefig(output_file, dpi=dpi, bbox_inches="tight")

# === ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô PDF ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á ===
plt.savefig(output_file_2, dpi=dpi_2, bbox_inches="tight")
plt.close()

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
img = Image.open(output_file)
print(f"Dimensions: {img.size} px")
print(f"DPI: {img.info.get('dpi')}")
