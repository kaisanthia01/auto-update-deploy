import os
import json
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import numpy as np
import xarray as xr
import pandas as pd
import cartopy.io.shapereader as shpreader
import warnings
from cartopy.io import DownloadWarning
from metpy.plots import StationPlot
from metpy.calc import reduce_point_density
from metpy.plots.wx_symbols import (
    current_weather,
    sky_cover,
    low_clouds,
    mid_clouds,
    high_clouds,
)
from metpy.units import units  # üî• ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!
from pyproj import Transformer
from PyQt6.QtWidgets import QApplication
from cartopy.geodesic import Geodesic
from cartopy.feature import ShapelyFeature
import matplotlib.ticker as mticker
import re
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
from PIL import Image
from datetime import datetime
import logging

logger = logging.getLogger("MapSurface")


class MapSurface:
    def __init__(self, main_window):
        self.figure = None
        self.ax = None
        self.main_window = main_window  # ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ

        script_dir = os.path.dirname(os.path.abspath(__file__))  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå .py
        # ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
        self.json_station_world_file = os.path.join(
            script_dir, "../data/json/synop_station_world_list.json"
        )

        # ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Plot
        self.json_data_surface_file = os.path.join(
            script_dir, "../data/json/synop_data_surface.json"
        )

        # ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÅ‡∏•‡πâ‡∏ß
        self.json_data_plot_surface_file = os.path.join(
            script_dir, "../data/json/synop_data_plot_surface.json"
        )

    @staticmethod
    def safe_slice_int(s: str, start: int, end: int, default: int = 0) -> int:
        try:
            return int(s[start:end])
        except (ValueError, TypeError, IndexError):
            return default

    @staticmethod
    def safe_slice_float(
        s: str, start: int, end: int, scale: float = 1.0, default: float = 0.0
    ) -> float:
        try:
            return float(s[start:end]) * scale
        except (ValueError, TypeError, IndexError):
            return default

    def create_map(self, date=None, time=None, limit=None):
        script_dir = os.path.dirname(os.path.abspath(__file__))  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå .py
        logo_path = os.path.join(script_dir, "../images/icons/sfc-2.png")
        output_file = os.path.join(script_dir, "../output/map/surface.png")

        # === ‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û ===
        dpi = 300
        width_px = 4612
        height_px = 3210
        width_in = width_px / dpi
        height_in = height_px / dpi

        # === ‡πÄ‡∏ß‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö ===
        margin_in = 0.15
        margin_x = margin_in / width_in
        margin_y = margin_in / height_in

        # === ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ===
        fig = plt.figure(figsize=(width_in, height_in), dpi=dpi)

        ax = fig.add_axes(
            [margin_x, margin_y, 1 - 2 * margin_x, 1 - 2 * margin_y],
            projection=ccrs.PlateCarree(),
        )

        # === ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏ß‡∏û‡∏∑‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
        # ‡∏ó‡∏¥‡∏®‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏∏‡πâ‡∏á 50 ‡∏≠‡∏á‡∏®‡∏≤‡πÄ‡∏´‡∏ô‡∏∑‡∏≠, ‡∏ó‡∏¥‡∏®‡πÉ‡∏ï‡πâ ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏∏‡πâ‡∏á -31 ‡∏≠‡∏á‡∏®‡∏≤‡πÉ‡∏ï‡πâ, ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ß‡∏á 160 ‡∏≠‡∏á‡∏®‡∏≤‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å, ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ß‡∏á 45 ‡∏≠‡∏á‡∏®‡∏≤‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å
        ax.set_extent([45.0, 160.0, -30.0, 50.0], crs=ccrs.PlateCarree())

        # === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
        cartopy_data_path = None
        if not cartopy_data_path:
            script_dir = os.path.dirname(os.path.abspath(__file__))  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå .py
            cartopy_data_path = os.path.join(script_dir, "../data/cartopy")

        # === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå shapefile ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        shapefiles_found = (
            any(
                fname.endswith((".shp", ".dbf", ".shx"))
                for fname in os.listdir(cartopy_data_path)
            )
            if os.path.isdir(cartopy_data_path)
            else False
        )

        # üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if shapefiles_found:
            os.environ["CARTOPY_USER_BACKGROUNDS"] = cartopy_data_path
            os.environ["CARTOPY_USER_SHAPEFILES"] = cartopy_data_path
            print("‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á:", cartopy_data_path)
        else:
            print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏°‡∏û‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‚Üí ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏à‡∏≤‡∏Å Natural Earth")
        # === ‡πÅ‡∏¢‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏û‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
        if shapefiles_found:
            self._add_map_features(ax, cartopy_data_path)
        else:
            self._add_default_features(ax)

        # === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á polygon)
        self._add_thailand_borderline_only(ax, cartopy_data_path, linewidth=0.5)

        # === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏¥‡∏î lat/lon
        self._add_inner_latlon_labels(ax, interval=5, color="gray", fontsize=7)

        # === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Synoptic
        self._add_obs_map(ax, date, time, limit)

        # === ‡∏ß‡∏≤‡∏á‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ‡∏î‡πâ‡∏ß‡∏¢ ax.imshow()
        logo_img = Image.open(logo_path)

        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ ~1 ‡∏ô‡∏¥‡πâ‡∏ß ‡∏Å‡∏ß‡πâ‡∏≤‡∏á
        logo_width_in = 1.0
        logo_width_px = int(logo_width_in * dpi)
        logo_height_px = int(logo_img.height * (logo_width_px / logo_img.width))
        logo_resized = logo_img.resize((logo_width_px, logo_height_px))
        logo_array = np.asarray(logo_resized)

        # ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡∏ß‡∏≤‡∏á (‡∏°‡∏∏‡∏°‡∏•‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢)
        logo_lon = 48
        logo_lat = -28

        # ‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏≠‡∏á‡∏®‡∏≤ (‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ)
        logo_width_deg = 8
        logo_height_deg = 8 * (logo_resized.height / logo_resized.width)

        # ‡∏ß‡∏≤‡∏á‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ö‡∏ô‡πÅ‡∏Å‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        ax.imshow(
            logo_array,
            extent=[
                logo_lon,
                logo_lon + logo_width_deg,
                logo_lat,
                logo_lat + logo_height_deg,
            ],
            transform=ccrs.PlateCarree(),
            zorder=10,
            interpolation="antialiased",
        )

        # DPI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö export ‡∏ä‡∏±‡∏î
        plt.rcParams["savefig.dpi"] = 600

        # === ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        plt.savefig(output_file, dpi=dpi)
        plt.close()
        print(output_file)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        img = Image.open(output_file)
        print(f"Dimensions: {img.size} px")
        print(f"DPI: {img.info.get('dpi')}")

    def _add_map_features(self, ax, cartopy_data_path):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á, ‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô, ‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏∞‡πÄ‡∏•‡∏•‡∏á‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà"""
        self.main_window.append_debugger("üó∫Ô∏è Downloading Map Features in local")
        boundary_path = os.path.join(
            cartopy_data_path, "ne_50m_admin_0_boundary_lines_land.shp"
        )
        coast_path = os.path.join(cartopy_data_path, "ne_50m_coastline.shp")
        countries_path = os.path.join(
            cartopy_data_path, "ne_110m_admin_0_countries.shp"
        )
        marine_path = os.path.join(
            cartopy_data_path, "ne_10m_geography_marine_polys.shp"
        )

        # ‚úÖ ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        ax.add_feature(
            cfeature.LAND, facecolor="navajowhite", alpha=0.1
        )  # ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô (‡∏™‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠)
        ax.add_feature(
            cfeature.OCEAN,
            facecolor="lightblue",
            alpha=0.1,
        )  # ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏ô‡πâ‡∏≥ (‡πÄ‡∏á‡∏¥‡∏ô‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡πà‡∏≠‡∏ô)

        try:
            # ‚úÖ ‡∏û‡∏•‡πá‡∏≠‡∏ï‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô (BORDERS)
            if os.path.exists(boundary_path):
                borders = shpreader.Reader(boundary_path)
                ax.add_geometries(
                    borders.geometries(),
                    crs=ccrs.PlateCarree(),
                    edgecolor="#a3a3a3",
                    facecolor="none",
                    linewidth=0.2,
                )
            else:
                ax.add_feature(cfeature.BORDERS, linewidth=0.2, edgecolor="#a3a3a3")

        except Exception as e:
            print(f"‚ùå Failed to add borders: {e}")

        try:
            # ‚úÖ ‡∏û‡∏•‡πá‡∏≠‡∏ï‡πÅ‡∏ô‡∏ß‡∏ä‡∏≤‡∏¢‡∏ù‡∏±‡πà‡∏á (COASTLINE)
            if os.path.exists(coast_path):
                coast = shpreader.Reader(coast_path)
                ax.add_geometries(
                    coast.geometries(),
                    crs=ccrs.PlateCarree(),
                    edgecolor="#a3a3a3",
                    facecolor="none",
                    linewidth=0.2,
                )
            else:
                ax.add_feature(cfeature.COASTLINE, linewidth=0.2, edgecolor="#a3a3a3")

        except Exception as e:
            print(f"‚ùå Failed to add coastline: {e}")

        try:
            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
            west, east, south, north = ax.get_extent(ccrs.PlateCarree())

            # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà)
            if os.path.exists(countries_path):
                reader = shpreader.Reader(countries_path)
                for country in reader.records():
                    lon, lat = country.geometry.centroid.coords[0]
                    name = country.attributes["NAME"]

                    # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                    if west + 2 <= lon <= east - 2 and south <= lat <= north:
                        ax.text(
                            lon,
                            lat,
                            name,
                            fontsize=5,
                            ha="center",
                            clip_on=True,  # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¢‡∏Ç‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                            transform=ccrs.PlateCarree(),
                            color="grey",
                            alpha=0.5,
                        )

        except Exception as e:
            print(f"‚ùå Failed to add country names: {e}")

        try:
            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
            west, east, south, north = ax.get_extent(ccrs.PlateCarree())

            # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏∞‡πÄ‡∏•, ‡∏≠‡πà‡∏≤‡∏ß, ‡πÅ‡∏•‡∏∞‡∏°‡∏´‡∏≤‡∏™‡∏°‡∏∏‡∏ó‡∏£
            if os.path.exists(marine_path):
                reader = shpreader.Reader(marine_path)
                for marine in reader.records():
                    lon, lat = marine.geometry.centroid.coords[0]

                    # ‚úÖ ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå keys ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏î‡∏π
                    # print(marine.attributes.keys())

                    # ‚úÖ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ key ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏∞‡πÄ‡∏•/‡∏≠‡πà‡∏≤‡∏ß
                    name = marine.attributes.get("NAME", "") or marine.attributes.get(
                        "name", ""
                    )

                    if name and west <= lon <= east and south <= lat <= north:
                        ax.text(
                            lon,
                            lat,
                            name,
                            fontsize=1.5,
                            alpha=0.3,
                            color="darkblue",
                            ha="center",
                            clip_on=True,  # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                            transform=ccrs.PlateCarree(),
                        )

        except Exception as e:
            print(f"‚ùå Failed to add sea names: {e}")

    def _add_default_features(self, ax):
        self.main_window.append_debugger("üåê Downloading Online Natural Earth")

        # ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
        print("üåê ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏°‡∏û‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‚Üí ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏à‡∏≤‡∏Å Natural Earth (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...)")

        # ‡∏õ‡∏¥‡∏î‡πÅ‡∏™‡∏î‡∏á warning ‡∏ã‡πâ‡∏≥ ‡πÜ
        warnings.simplefilter("default", DownloadWarning)

        ax.add_feature(cfeature.BORDERS, linewidth=0.2, edgecolor="#a3a3a3")
        ax.add_feature(cfeature.COASTLINE, linewidth=0.2, edgecolor="#a3a3a3")

        # ‚úÖ ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        ax.add_feature(cfeature.LAND, facecolor="navajowhite")  # ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô (‡∏™‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠)
        ax.add_feature(cfeature.OCEAN, facecolor="lightblue")  # ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏ô‡πâ‡∏≥ (‡πÄ‡∏á‡∏¥‡∏ô‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡πà‡∏≠‡∏ô)

        # ax.add_feature(cfeature.LAND, facecolor="navajowhite")
        # ax.add_feature(cfeature.OCEAN, facecolor="lightblue")
        # ax.add_feature(cfeature.LAKES, facecolor="aliceblue")
        # ax.add_feature(cfeature.RIVERS, edgecolor="lightblue", linewidth=0.4)
        # ax.gridlines(draw_labels=True, linewidth=0.3, color="gray", linestyle="--")

    def _add_thailand_borderline_only(self, ax, cartopy_data_path, linewidth=0.5):
        shapefile_path = os.path.join(cartopy_data_path, "ne_50m_admin_0_countries.shp")
        color = "darkred"

        try:
            reader = shpreader.Reader(shapefile_path)

            thailand_shape = [
                record.geometry
                for record in reader.records()
                if record.attributes.get("NAME") == "Thailand"
            ]

            if thailand_shape:
                border = ShapelyFeature(
                    thailand_shape,
                    ccrs.PlateCarree(),
                    edgecolor=color,
                    facecolor="none",
                    linewidth=linewidth,
                    zorder=6,
                )
                ax.add_feature(border)
            else:
                print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô shapefile ‡∏ô‡∏µ‡πâ")

        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢: {e}")

    def _add_inner_latlon_labels(self, ax, interval=5, color="black", fontsize=0.5):
        # ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏¥‡∏î (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
        gl = ax.gridlines(
            crs=ccrs.PlateCarree(),
            draw_labels=False,
            linewidth=0.5,
            color=color,
            alpha=0.5,
            linestyle="--",
            zorder=4,
        )
        gl.xlocator = mticker.MultipleLocator(interval)
        gl.ylocator = mticker.MultipleLocator(interval)

        # ‡∏î‡∏∂‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        extent = ax.get_extent(ccrs.PlateCarree())
        west, east, south, north = extent

        # ‡∏õ‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏£ interval ‡∏•‡∏á‡∏ï‡∏±‡∏ß
        def next_divisible_by(x, base):
            return x if x % base == 0 else x + (base - (x % base))

        lon_start = next_divisible_by(np.floor(west), interval)
        lat_start = next_divisible_by(np.floor(south), interval)

        lon_ticks = np.arange(lon_start, np.ceil(east) + interval, interval)
        lat_ticks = np.arange(lat_start, np.ceil(north) + interval, interval)

        # ‡∏£‡∏∞‡∏¢‡∏∞‡∏Ç‡∏¢‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö
        dx = (east - west) * 0.005
        dy = (north - south) * 0.015

        start = 1

        # ‡∏ß‡∏≤‡∏î label ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î (‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö)
        for lon in lon_ticks[start:-1]:
            if west <= lon <= east:
                y_pos = south + dy
                if south < y_pos < north:
                    label = (
                        f"{abs(int(round(lon)))}¬∞E"
                        if lon >= 0
                        else f"{abs(int(round(lon)))}¬∞W"
                    )
                    ax.text(
                        lon,
                        y_pos,
                        label,
                        fontsize=fontsize,
                        color="#AAAAAA",
                        ha="center",
                        va="bottom",
                        transform=ccrs.PlateCarree(),
                        # bbox=dict(facecolor="white", alpha=1.0, edgecolor="none"),
                        zorder=10,
                    )

        # ‡∏ß‡∏≤‡∏î label ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î (‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏ã‡πâ‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö)
        for lat in lat_ticks[start:-1]:
            if south <= lat <= north:
                x_pos = west + dx
                if west < x_pos < east:
                    label = (
                        f"{abs(int(round(lat)))}¬∞N"
                        if lat >= 0
                        else f"{abs(int(round(lat)))}¬∞S"
                    )
                    ax.text(
                        x_pos,
                        lat,
                        label,
                        fontsize=fontsize,
                        color="#AAAAAA",
                        ha="left",
                        va="center",
                        transform=ccrs.PlateCarree(),
                        # bbox=dict(facecolor="white", alpha=1.0, edgecolor="none"),
                        zorder=10,
                    )

    def _add_obs_map(self, ax, date=None, time=None, limit=None):
        try:
            self.main_window.append_debugger("üü° Plot Surface() Called")
            if not ax:
                self.main_window.append_debugger("‚ùå Map not initialized")
                return

            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ surface ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            data_synop = self.load_json(self.json_data_surface_file)
            self.main_window.append_debugger(
                f"üìÑ Loaded parsed surface data: {len(data_synop)} entries"
            )

            data_station = self.load_json(self.json_station_world_file)
            self.main_window.append_debugger(
                f"üìÑ Loaded stations: {len(data_station)} entries"
            )

            if not data_synop or not data_station:
                self.main_window.append_debugger("‚ùå Missing data file(s)")
                return ax

            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• synop ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô
            dates = sorted(
                {r.get("date") for r in data_synop if r.get("date")}, reverse=True
            )

            if len(dates) > 0:
                latest_date = dates[0]
                self.main_window.append_debugger(f"üìÜ Date: {latest_date}")
            else:
                self.main_window.append_debugger("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ß‡∏±‡∏ô")
                return ax

            stations = []
            for record in data_synop:
                station_info = next(
                    (
                        s
                        for s in data_station
                        if s["station_id"] == record["station_id"]
                    ),
                    None,
                )
                if not station_info:
                    continue

                try:
                    main = record.get("main", {})

                    info_irix = main.get("IrIxhVV", "00000")
                    info_nddff = main.get("Nddff", "00000")
                    info_temp = main.get("1SnTTT", "00000")
                    info_dewp = main.get("2SnTdTdTd", "00000")
                    info_pres = main.get("4PPPP", "00000")
                    info_weather = main.get("7wwW1W2", "00000")
                    info_cloud = main.get("8NhClCmCH", "00000")

                    if info_pres[0:2] != "40":
                        continue

                    ff_raw = self.safe_slice_int(info_nddff, 3, 5)
                    dd = (
                        self.safe_slice_int(info_nddff, 1, 3) * 10 if ff_raw >= 3 else 0
                    )
                    ff = ff_raw if ff_raw >= 3 else 0

                    stations.append(
                        {
                            "station_id": record["station_id"],
                            "lat": float(station_info["location"]["latitude"]),
                            "lon": float(station_info["location"]["longitude"]),
                            "h": info_irix[2:3],
                            "vv": self.safe_slice_int(info_irix, 3, 5),
                            "n": (
                                0
                                if info_nddff[0:1] == "/"
                                else self.safe_slice_int(info_nddff, 0, 1)
                            ),
                            "dd": dd,
                            "ff": ff,
                            "nt": self.safe_slice_int(info_temp, 1, 2),
                            "TTT": self.safe_slice_float(info_temp, 2, 5, scale=0.1),
                            "nd": self.safe_slice_int(info_dewp, 1, 2),
                            "DDD": self.safe_slice_float(info_dewp, 2, 5, scale=0.1),
                            "pppp": self.safe_slice_int(info_pres, 1, 5),
                            "ww": self.safe_slice_int(info_weather, 1, 3),
                            "Nh": self.safe_slice_int(info_cloud, 1, 2),
                            "Cl": self.safe_slice_int(info_cloud, 2, 3),
                            "Cm": self.safe_slice_int(info_cloud, 3, 4),
                            "Ch": self.safe_slice_int(info_cloud, 4, 5),
                        }
                    )
                except Exception as e:
                    self.main_window.append_debugger(
                        f"‚ö†Ô∏è Parse error for station {record['station_id']}: {e}"
                    )
                    continue

            # ‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
            self.write_json(self.json_data_plot_surface_file, stations)
            self.main_window.append_debugger(f"‚úÖ Parsed {len(stations)} stations")

            if not stations:
                self.main_window.append_debugger("‚ùå No stations to plot")
                return ax

            # ‚ñ∂Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î
            df = pd.DataFrame(stations)

            transformer = Transformer.from_crs("EPSG:4326", "EPSG:3857", always_xy=True)
            df["x_meter"], df["y_meter"] = transformer.transform(
                df["lon"].values, df["lat"].values
            )

            # ‚ñ∂Ô∏è ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏à‡∏∏‡∏î
            point_locs = xr.DataArray(
                np.stack([df["x_meter"], df["y_meter"]], axis=-1),
                dims=("points", "space"),
                attrs={"crs": ccrs.PlateCarree()},
            )
            mask = reduce_point_density(
                point_locs * units.meter, 150000.0 * units.meter
            )
            df = df[mask]

            # ‚ñ∂Ô∏è ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
            df = df[
                (df["lon"] >= 46.5)
                & (df["lon"] <= 159.5)
                & (df["lat"] >= -30.5)
                & (df["lat"] <= 48.8)
            ]

            if df.empty:
                self.main_window.append_debugger("‚ùå No stations to plot")
                return ax

            try:
                self.main_window.append_debugger("‚ñ∂Ô∏è Plot Surface ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏î‡πâ‡∏ß‡∏¢ MetPy")
                df_north = df[df["lat"] >= 0]
                df_south = df[df["lat"] < 0]

                # ‚ñ∂Ô∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô plot ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏•‡∏° (‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡πÑ‡∏î‡πâ)
                def plot_station_surface(plot_obj, df_part):
                    df_part.loc[df_part["nt"] == 1, "TTT"] *= -1
                    df_part.loc[df_part["nd"] == 1, "DDD"] *= -1
                    plot_obj.plot_parameter(
                        "NW",
                        df_part["TTT"],
                        formatter=lambda v: f"{v:.1f}",
                        fontsize=2,
                        zorder=10,
                    )
                    plot_obj.plot_parameter(
                        "SW",
                        df_part["DDD"],
                        formatter=lambda v: f"{v:.1f}",
                        fontsize=2,
                        zorder=10,
                    )
                    plot_obj.plot_parameter(
                        "W2",
                        df_part["vv"],
                        fontsize=2,
                        zorder=10,
                    )
                    plot_obj.plot_parameter(
                        "SE",
                        df_part["Nh"].where(df_part["Nh"] != 0),
                        fontsize=2,
                        zorder=10,
                    )
                    plot_obj.plot_parameter(
                        (1.3, 1),
                        df_part["pppp"],
                        formatter=lambda v: f"{int(v):03d}",
                        fontsize=2,
                        color="red",
                        zorder=10,
                    )

                    # ‚ñ∂Ô∏è Symbols
                    def clip_symbol(data, min_val, max_val):
                        return (
                            pd.Series(
                                np.where(
                                    (data >= min_val) & (data <= max_val), data, np.nan
                                )
                            )
                            .dropna()
                            .astype(int)
                        )

                    plot_obj.plot_symbol(
                        "W",
                        clip_symbol(df_part["ww"].astype(float), 0, 99),
                        current_weather,
                        fontsize=2,
                        zorder=10,
                        # color="red",
                    )
                    plot_obj.plot_symbol(
                        "C",
                        clip_symbol(df_part["n"].astype(float), 0, 9),
                        sky_cover,
                        fontsize=2.0,
                        zorder=10,
                    )
                    plot_obj.plot_symbol(
                        "S",
                        clip_symbol(df_part["Cl"].astype(float), 0, 9),
                        low_clouds,
                        fontsize=2,
                        zorder=10,
                    )
                    plot_obj.plot_symbol(
                        "N",
                        clip_symbol(df_part["Cm"].astype(float), 0, 9),
                        mid_clouds,
                        fontsize=2,
                    )
                    plot_obj.plot_symbol(
                        "N2",
                        clip_symbol(df_part["Ch"].astype(float), 0, 9),
                        high_clouds,
                        fontsize=2,
                        zorder=10,
                    )

                    # ‚ñ∂Ô∏è ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
                    plot_obj.plot_text(
                        (0, 1.5),
                        df_part["station_id"],
                        fontsize=2,
                        color="blue",
                        zorder=5,
                        alpha=0.5,
                    )

                # ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö wind barb (‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏ã‡∏µ‡∏Å‡πÇ‡∏•‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡πÉ‡∏ï‡πâ)
                barb_defaults = {"sizes": {"emptybarb": 0.2}}

                # ‚ñ∂Ô∏è ‡∏ã‡∏µ‡∏Å‡πÇ‡∏•‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
                if not df_north.empty:
                    u_n = -df_north["ff"] * np.sin(np.radians(df_north["dd"]))
                    v_n = -df_north["ff"] * np.cos(np.radians(df_north["dd"]))

                    plot_n = StationPlot(
                        ax,
                        df_north["lon"].values,
                        df_north["lat"].values,
                        transform=ccrs.PlateCarree(),
                        fontsize=1.4,
                        spacing=2,
                        zorder=5,
                    )
                    plot_station_surface(plot_n, df_north)

                    plot_n.plot_barb(
                        np.nan_to_num(u_n),
                        np.nan_to_num(v_n),
                        flip_barb=False,
                        linewidth=0.1,
                        length=2.5,  # ‚úÖ ‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ã‡∏µ‡∏Å‡πÇ‡∏•‡∏Å‡πÉ‡∏ï‡πâ
                        zorder=10,
                        sizes=barb_defaults["sizes"],  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° sizes ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                    )

                # ‚ñ∂Ô∏è ‡∏ã‡∏µ‡∏Å‡πÇ‡∏•‡∏Å‡πÉ‡∏ï‡πâ
                if not df_south.empty:
                    u_s = -df_south["ff"] * np.sin(np.radians(df_south["dd"]))
                    v_s = -df_south["ff"] * np.cos(np.radians(df_south["dd"]))

                    plot_s = StationPlot(
                        ax,
                        df_south["lon"].values,
                        df_south["lat"].values,
                        transform=ccrs.PlateCarree(),
                        fontsize=1.4,
                        spacing=2,
                        zorder=5,
                    )
                    plot_station_surface(plot_s, df_south)

                    plot_s.plot_barb(
                        np.nan_to_num(u_s),
                        np.nan_to_num(v_s),
                        flip_barb=True,
                        linewidth=0.1,
                        length=2.5,
                        zorder=10,
                        sizes=barb_defaults["sizes"],  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                    )

                # ‚ñ∂Ô∏è Label
                date = re.sub("-", " ", date)
                west, east, south, north = ax.get_extent(ccrs.PlateCarree())
                x_text = west + (east - west) * 0.16125
                y_text = south + (north - south) * 0.1485
                ax.text(
                    x_text,
                    y_text,
                    f"{date}".upper(),
                    fontsize=10,
                    fontweight="bold",
                    color="blue",
                    ha="center",
                    va="center",
                    transform=ccrs.PlateCarree(),
                    zorder=30,
                )

                x_text = west + (east - west) * 0.160
                y_text = south + (north - south) * 0.140
                ax.text(
                    x_text,
                    y_text - 1.0,
                    f"{time}",
                    fontsize=10,
                    fontweight="bold",
                    color="red",
                    ha="center",
                    va="center",
                    transform=ccrs.PlateCarree(),
                    zorder=30,
                )

                x_text = west + (east - west) * 0.160
                y_text = south + (north - south) * 0.110
                ax.text(
                    x_text,
                    y_text,
                    "‡∏≠‡∏ï.‡∏ó‡∏≠. 1001",
                    fontsize=8,
                    color="black",
                    ha="center",
                    va="center",
                    transform=ccrs.PlateCarree(),
                    zorder=30,
                )

                self.main_window.append_debugger("‚úÖ Plot Surface ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏î‡πâ‡∏ß‡∏¢ MetPy")
            except Exception as e:
                self.main_window.append_debugger(f"‚ùå Plot Surface Error: {e}")
        except Exception as e:
            self.main_window.append_debugger(
                f"‚ùå Unexpected error in Plot Surface: {e}"
            )

    def load_json(self, path):
        if not os.path.exists(path):
            self.main_window.append_debugger(f"‚ö†Ô∏è File not found: {path}")
            return []
        try:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            self.main_window.append_debugger(f"‚ö†Ô∏è Failed to load JSON: {e}")
            return []

    def write_json(self, path, data):
        try:
            with open(path, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=4)
            self.main_window.append_debugger(f"‚úÖ JSON saved successfully: {path}")
            return True
        except Exception as e:
            self.main_window.append_debugger(f"‚ùå Failed to write JSON: {e}")
            return False
