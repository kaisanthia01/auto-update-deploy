import sys
from pathlib import Path
from typing import Optional

from PySide6.QtWidgets import QMainWindow, QMessageBox, QFileDialog
from PySide6.QtQuickWidgets import QQuickWidget
from PySide6.QtCore import (
    Qt,
    QUrl,
    QDate,
    QPoint,
    QLocale,
    Slot,
    Signal,
    QObject,
    QCoreApplication,
    QTimer,
    QEvent,
)
from PySide6.QtQml import QQmlError

from core.check_array_temp import CheckArrayTEMP
from core.check_array_wind import CheckArrayWND
from core.check_code_aaxx_full import CheckCodeAAXXFull
from core.check_code_aaxx_full_2 import CheckCodeAAXXFull2
from core.check_code_ttaa import CheckCodeTTAA
from core.check_code_ttbb import CheckCodeTTBB
from core.check_code_upper_wind import CheckCodeUpperWind
from core.check_url_detail import CheckURLDetail
from core.check_url_pressure import CheckURLPressure
from core.check_url_skewt import CheckURLSkewT
from core.check_url_surface import CheckURLSurface
from core.check_url_upper_wind import CheckURLUpperWind
from core.plot_manager import PlotManager
from core.splash_sequence_manager import SplashSequenceManager
from core.table_view_skewt import TableViewSkewT
from core.table_view_synoptic import TableViewSynoptic
from core.table_view_upper_wind import TableViewUpperWind
from ui.views.splash_window import SplashBridge
from PySide6.QtNetwork import QNetworkAccessManager, QNetworkRequest, QNetworkReply

import shutil
import os
import json
from datetime import datetime
from PIL import Image
import logging

# ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log
logger = logging.getLogger("MainWindow")


class MainWindow(QMainWindow):
    imagePathChanged = Signal(str, str)  # (tab_name, file_url)
    dataCheckURL = Signal(bool)  # üîî ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡πâ QML ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    dataLoadedChanged = Signal(bool)  # üîî ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡πâ QML ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
    fullscreenChanged = Signal(bool)  # üîî ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡πâ QML ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á fullscreen ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    versionLoader = Signal(str)  # üîî ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡πâ QML ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
    convertA3 = Signal(bool)  # üîî ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡πâ QML ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°

    def __init__(self, splash_bridge: Optional[SplashBridge] = None, vName: str = ""):
        super().__init__()

        # === ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ===
        self.surface_data = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏∑‡πâ‡∏ô‡∏ú‡∏¥‡∏ß
        self.detail_data = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        self.pressure_data = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô
        self.upperwind1_data = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏Å
        self.upperwind2_data = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏≠‡∏á
        self.skewt_data = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÇ‡∏°‡πÑ‡∏î‡∏ô‡∏≤‡∏°‡∏¥‡∏Å
        self.table_window = None  # ‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á TableView

        self._restore_geometry = None  # ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
        self.date_text = ""  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö date_text
        self.time_text = ""  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö time_text
        self.value_index = 0  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö value_index
        self.station_id = ""  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö station_id
        self.pressure_level = ""  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pressure_level

        self.surface_text = ""  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö surface_text
        self.detail_text = ""  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö detail_text
        self.pressure_text = ""  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pressure_text
        self.upperwind1_text = ""  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö upperwind1_text
        self.upperwind2_text = ""  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö upperwind2_text
        self.skewt_text = ""  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö skewt_text

        self.check_open_file_surface = False  # ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏∑‡πâ‡∏ô‡∏ú‡∏¥‡∏ß
        self.check_open_file_detail = False  # ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        self.check_open_file_pressure = False  # ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô
        self.check_open_file_upperwind1 = False  # ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏Å
        self.check_open_file_upperwind2 = False  # ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏≠‡∏á
        self.check_open_file_skewt = False  # ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÇ‡∏°‡πÑ‡∏î‡∏ô‡∏≤‡∏°‡∏¥‡∏Å

        self._drag_pos: Optional[QPoint] = None  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
        self._splash_bridge = splash_bridge  # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö splash screen
        self.sequence: Optional[SplashSequenceManager] = (
            None  # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ splash sequence
        )
        self.view: Optional[QQuickWidget] = None  # QML view container
        self.qml_interface = (
            self  # ‡πÉ‡∏´‡πâ PlotManager ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ self.imagePathChanged.emit()
        )
        self.fullscreenChanged.emit(self.isFullScreen())  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô emit ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ fullscreen
        self._setup_splash()  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô splash sequence ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        self._initialize_app()  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á QNetworkAccessManager ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ
        self.manager = QNetworkAccessManager(self)
        self.manager.finished.connect(self._on_connection_checked)

        # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        self.check_connection()

        # ‚úÖ ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÉ‡∏´‡πâ QML ‡∏ó‡∏£‡∏≤‡∏ö
        self.versionLoader.emit(vName)  # üîî ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡πâ QML ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
        self.vName = vName

    def _initialize_app(self):
        try:
            self._setup_window()
            self._setup_qml_view()
            self._load_qml()
            self._start_sequence()
        except Exception as e:
            self._critical_error("Initialization Error", str(e))

    def _setup_splash(self):
        if self._splash_bridge:
            self.sequence = SplashSequenceManager(self._splash_bridge)
            self.sequence.add_step("üîß Initializing UI...", 600)
        else:
            logger.warning("No SplashBridge provided. Skipping splash steps.")

    def _setup_window(self):
        self.setWindowTitle("Meteorological Plotting System")
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)

        # === ‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ===
        base_width = 1470
        base_height = 800

        # === ‡∏î‡∏∂‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏¢‡∏π‡πà
        screen = self.screen().availableGeometry()
        screen_width = screen.width()
        screen_height = screen.height()

        logger.info(f"üñ• Screen size: {screen_width}x{screen_height}")

        # === ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Scale (‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏ñ‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏•‡πá‡∏Å)
        scale_factor = 1.0

        if screen_width < 1600 or screen_height < 900:
            scale_factor = (
                min(screen_width / base_width, screen_height / base_height) * 0.95
            )  # ‡∏•‡∏î‡∏•‡∏á‡∏≠‡∏µ‡∏Å 5% ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ margin

        new_width = int(base_width * scale_factor)
        new_height = int(base_height * scale_factor)

        # === Set ‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß
        self.resize(new_width, new_height)

        # === ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≠
        x = (screen_width - new_width) // 2
        y = (screen_height - new_height) // 2
        self.move(x, y)

        logger.info(
            f"ü™ü Window size: {new_width}x{new_height} (scale factor: {scale_factor:.2f})"
        )

    def _setup_qml_view(self):
        self.view = QQuickWidget()
        self.view.setResizeMode(QQuickWidget.SizeRootObjectToView)
        self.view.setClearColor(Qt.transparent)
        self.setCentralWidget(self.view)
        logger.info("QML View configured")
        if self.sequence:
            self.sequence.add_step("üì¶ QML View container ready...", 800)

    def _load_qml(self):
        qml_path = self._find_qml_file()
        if not qml_path:
            raise FileNotFoundError("MainWindow.qml not found in known paths")

        self._inject_context_properties()
        self.view.setSource(QUrl.fromLocalFile(str(qml_path)))

        if self.view.status() != QQuickWidget.Ready:
            self._log_qml_errors()
            raise RuntimeError("QML failed to load. Check logs.")

        logger.info("QML loaded from: %s", qml_path)

    def _find_qml_file(self) -> Optional[Path]:
        candidates = [
            Path(__file__).parent.parent / "qml" / "MainWindow.qml",
            Path(sys.executable).parent / "ui" / "qml" / "MainWindow.qml",
            Path("C:/Program Files/AWSS/ui/qml/MainWindow.qml"),
            Path("/usr/share/awss/ui/qml/MainWindow.qml"),
        ]
        for path in candidates:
            if path.exists():
                return path
        logger.error("Could not find MainWindow.qml in:")
        for p in candidates:
            logger.error(f" - {p}")
        return None

    def _inject_context_properties(self):
        ctx = self.view.rootContext()
        ctx.setContextProperty("rootWindow", self)
        ctx.setContextProperty("systemLocale", QLocale.system().name())
        ctx.setContextProperty("currentTab", "Surface")
        ctx.setContextProperty("selectedDate", QDate.currentDate())
        ctx.setContextProperty("isFullscreen", self.isFullScreen())
        logger.debug("Injected context properties into QML")

    def _log_qml_errors(self):
        for error in self.view.errors():
            msg = f"‚ùå Line {error.line()}: {error.description()}"
            if error.url().isValid():
                msg += f" (File: {error.url().toString()})"
            logger.error(msg)
        QMessageBox.critical(
            self, "QML Load Error", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ñ‡∏≠‡∏ö QML"
        )

    def _start_sequence(self):
        if self.sequence:
            self.sequence.add_step("‚úÖ UI Ready!", 600)
            self.sequence.start()

            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å plot ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏∑‡πâ‡∏ô‡∏ú‡∏¥‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            # self.plot_map_by_tab("Surface")
        else:
            logger.info("No splash sequence running.")

    def _critical_error(self, title: str, message: str):
        logger.critical(f"{title}: {message}")
        QMessageBox.critical(self, title, message)
        sys.exit(1)

    def mousePressEvent(self, event):
        if (
            event.button() == Qt.LeftButton
            and not self.isFullScreen()
            and not self.isMaximized()
        ):
            self._drag_pos = event.globalPosition().toPoint()

    def mouseMoveEvent(self, event):
        if (
            event.buttons() & Qt.LeftButton
            and self._drag_pos
            and not self.isFullScreen()
            and not self.isMaximized()
        ):
            delta = event.globalPosition().toPoint() - self._drag_pos
            self.move(self.pos() + delta)
            self._drag_pos = event.globalPosition().toPoint()

    @Slot(str)
    def updateCurrentTab(self, tab_name: str):
        self.view.rootContext().setContextProperty("currentTab", tab_name)
        logger.debug(f"Tab changed to: {tab_name}")

    @Slot(QDate)
    def updateSelectedDate(self, date: QDate):
        self.view.rootContext().setContextProperty("selectedDate", date)
        logger.debug(f"Selected date updated: {date.toString()}")

    @Slot()
    def minimize(self):
        self.showMinimized()

    @Slot(result=bool)
    def toggleFullscreen(self) -> bool:
        if self.isMaximized() or self.isFullScreen():
            # ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö manual
            self.setWindowState(Qt.WindowNoState)
            self.setGeometry(100, 100, 1470, 800)  # ‡∏´‡∏£‡∏∑‡∏≠ self._restore_geometry ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
            self.fullscreenChanged.emit(False)
            self.view.rootObject().setProperty("isFullscreen", False)

            # === ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≠ ===
            screen = self.screen().availableGeometry()
            size = self.geometry()
            x = (screen.width() - size.width()) // 2
            y = (screen.height() - size.height()) // 2
            self.move(x, y)

            logger.info("Window Normal Size and centered")
            return False
        else:
            # ‚úÖ ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠ (Maximized)
            self.showMaximized()
            self.fullscreenChanged.emit(True)
            self.view.rootObject().setProperty("isFullscreen", True)
            return True

    @Slot()
    def closeApp(self):
        self.close()  # üü° ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ sys.exit(1) ‡πÄ‡∏û‡∏∑‡πà‡∏≠ cleanup GUI event loop

    @Slot(str, str, int, str, str, str)
    def plot_map_by_tab(
        self,
        date_text: str = "",
        time_text: str = "",
        value_index: int = 0,
        station_id: str = "",
        pressure_level: str = "",
        tab_name: str = "",
    ):
        self.date_text = QDate.fromString(date_text, "yyyy-MM-dd")
        formatted_date = self.date_text.toString("dd MMM yyyy")  # ‡πÄ‡∏ä‡πà‡∏ô "15-May-2025"
        self.date_text = formatted_date
        self.time_text = time_text
        self.value_index = value_index
        self.station_id = station_id
        self.pressure_level = pressure_level

        # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á debug ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ plot
        if tab_name == "üìà Skew-T Log-P - ‡∏≠‡∏ï.‡∏ó‡∏≠. 1011":
            self.append_debugger(
                f"üìÖ Date: {self.date_text} | üïñ Time: {self.time_text} | "
                f"üÜî Station ID: {self.station_id} | "
                f"üìè Pressure Level: {self.pressure_level} | "
                f"üìä Value Index: {self.value_index}"
            )
            logger.info(
                f"üìÖ Date: {self.date_text} | üïñ Time: {self.time_text} | "
                f"üÜî Station ID: {self.station_id} | "
                f"üìè Pressure Level: {self.pressure_level} | "
                f"üìä Value Index: {self.value_index}"
            )
        else:
            self.append_debugger(
                f"üìÖ Date: {self.date_text} | üïñ Time: {self.time_text} | üìä Value Index: {self.value_index}"
            )
            logger.info(
                f"üìÖ Date: {self.date_text} | üïñ Time: {self.time_text} | üìä Value Index: {self.value_index}"
            )

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö tab_name ‡∏ß‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ó‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ plot ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        self.append_debugger(f"‚è≥ Plotting {tab_name}...")
        logger.info(f"Plotting map for tab: {tab_name}")

        pm = PlotManager(self)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡∏Å‡∏ï‡πå PlotManager
        if tab_name == "üó∫Ô∏è Surface ‡∏≠‡∏ï.‡∏ó‡∏≠. 1001":
            pm.plot_surface_and_update_qml(
                self.date_text, self.time_text, self.value_index
            )  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å plot ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏∑‡πâ‡∏ô‡∏ú‡∏¥‡∏ß (blank version)

        elif tab_name == "üó∫Ô∏è Pressure Change ‡∏≠‡∏ï.‡∏ó‡∏≠. 1010":
            pm.plot_pressure_and_update_qml(
                self.date_text, self.time_text, self.value_index
            )  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å plot ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô (blank version)

        elif tab_name == "üó∫Ô∏è Detail ‡∏≠‡∏ï.‡∏ó‡∏≠. 1003":
            pm.plot_detail_and_update_qml(
                self.date_text, self.time_text, self.value_index
            )  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å plot ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ (blank version)

        elif tab_name == "üó∫Ô∏è Upper Wind Air - 1 ‡∏≠‡∏ï.‡∏ó‡∏≠. 1002":
            pm.plot_wind_1_and_update_qml(
                self.date_text, self.time_text, self.value_index
            )  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å plot ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏Å (blank version)

        elif tab_name == "üó∫Ô∏è Upper Wind Air - 2 ‡∏≠‡∏ï.‡∏ó‡∏≠. 1013":
            pm.plot_wind_2_and_update_qml(
                self.date_text, self.time_text, self.value_index
            )  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å plot ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏≠‡∏á (blank version)

        elif tab_name == "üìà Skew-T Log-P - ‡∏≠‡∏ï.‡∏ó‡∏≠. 1011":
            pm.plot_skewt_and_update_qml(
                self.date_text, self.time_text, self.station_id, self.pressure_level
            )  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å plot ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÇ‡∏°‡πÑ‡∏î‡∏ô‡∏≤‡∏°‡∏¥‡∏Å (blank version)

        else:
            logger.warning(f"‚ö†Ô∏è Unrecognized tab name: {tab_name}")
            self.append_debugger(f"‚ö†Ô∏è Unrecognized tab name: {tab_name}")
            return

        # ‚úÖ ‡πÅ‡∏à‡πâ‡∏á QML: plot ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
        self.append_debugger(f"‚úÖ Plotting {tab_name} successfully.")

    @Slot(str, str, str, int)
    def load_data(
        self,
        date_text: str = "",
        time_text: str = "",
        station_filter: str = "",
        tab_index: int = 0,
    ):
        # ‚úÖ ‡∏•‡πâ‡∏≤‡∏á debug ‡∏Å‡πà‡∏≠‡∏ô
        self.update_debugger("")
        self.update_debugger(
            f"üì¶ Loading SYNOP Data by üìÖDate: {date_text}|üïñTime: {time_text}"
        )
        logger.info(f"üåè Loading Data by üìÖDate: {date_text}|üïñTime: {time_text}")

        # ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ date_text, time_text, value_index
        self.date_text = QDate.fromString(date_text, "yyyy-MM-dd")
        formatted_date = self.date_text.toString("dd MMM yyyy")  # ‡πÄ‡∏ä‡πà‡∏ô "15-May-2025"
        self.date_text = formatted_date
        self.time_text = time_text[0:8]

        tab_index = int(tab_index)
        logger.info(f"üóÇ Tab index: {tab_index}")

        content = None  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ content ‡πÄ‡∏õ‡πá‡∏ô None
        msg = ""  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ msg ‡πÄ‡∏õ‡πá‡∏ô string ‡∏ß‡πà‡∏≤‡∏á

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ tab_index ‡πÄ‡∏õ‡πá‡∏ô 0, 1 ‡∏´‡∏£‡∏∑‡∏≠ 2
        if tab_index == 0:
            self.surface_data = {}
            index = tab_index

            try:
                self.append_debugger(
                    "üîÑ Loading surface data from file."
                    if self.check_open_file_surface
                    else "üîÑ Loading surface data from URL."
                )
                logger.info(
                    "üîÑ Loading surface data from file."
                    if self.check_open_file_surface
                    else "üîÑ Loading surface data from URL."
                )

                check = CheckURLSurface()
                content, msg = check.urlGetContent(
                    time_text[0:4],
                    date_text,
                    self.surface_text if self.check_open_file_surface else None,
                )

                self.append_debugger("üü¢ CheckURLSurface Complete")
                logger.info("üü¢ CheckURLSurface Complete")

            except Exception as e:
                self.append_debugger(f"‚ùå Error while loading surface data:\n{e}")
                logger.error(f"‚ùå Error while loading surface data:\n{e}")
                return

            if content != "NIL":
                # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå JSON ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• surface
                Path("data/json/synop_data_surface.json").write_text(
                    "{}", encoding="utf-8"
                )

                decoder = CheckCodeAAXXFull()
                try:
                    if isinstance(content, dict):
                        for d, text in content.items():
                            decoded = decoder.decodeAAXX(text, index, d)
                            self.surface_data[d] = decoded
                    else:
                        # ‚úÖ ‡∏´‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô dict ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ decode
                        decoded = decoder.decodeAAXX(
                            {date_text: content}, index, save_to_file=True
                        )
                        self.surface_data[date_text] = decoded

                except Exception as e:
                    self.append_debugger(f"‚ùå Decode Error: {e}")
                    logger.error(f"‚ùå Decode Error: {e}")
                    return

                # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
                self.append_debugger("----------------------------------------")
                if isinstance(content, dict):
                    for d, text in content.items():
                        self.append_debugger(f"üìÖ {d}\n{text}")
                else:
                    self.append_debugger(content)

                self.append_debugger("----------------------------------------")
                self.append_debugger(
                    f"üü¢ Checking synoptic data: {date_text} | {time_text}: {msg}"
                )
                logger.info(
                    f"üü¢ Checking synoptic data: {date_text} | {time_text}: {msg}"
                )

                # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï QML ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                # self.view.rootObject().setProperty("isDataLoaded", True)
                self.dataLoadedChanged.emit(True)

            else:
                # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï QML ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
                # self.view.rootObject().setProperty("isDataLoaded", False)
                self.dataLoadedChanged.emit(False)

                self.append_debugger(
                    f"‚ùå Checking synoptic data: {date_text} | {time_text}: {msg}"
                )
                logger.error(
                    f"‚ùå Checking synoptic data: {date_text} | {time_text}: {msg}"
                )
                return

        elif tab_index == 1:
            self.pressure_data = {}
            index = tab_index

            try:
                self.append_debugger(
                    "üîÑ Loading pressure data from file."
                    if self.check_open_file_pressure
                    else "üîÑ Loading surface data from URL."
                )
                logger.info(
                    "üîÑ Loading pressure data from file."
                    if self.check_open_file_pressure
                    else "üîÑ Loading pressure data from URL."
                )

                check = CheckURLPressure()
                content, msg = check.urlGetContent(
                    time_text[0:4],
                    date_text,
                    self.pressure_text if self.check_open_file_pressure else None,
                )

                self.append_debugger(f"üü¢ CheckURLPressure Complete")
                logger.info(f"üü¢ CheckURLPressure Complete")

            except Exception as e:
                self.append_debugger(f"‚ùå Error while loading pressure data:\n{e}")
                logger.error(f"‚ùå Error while loading pressure data:\n{e}")
                return

            if content != "NIL":
                # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå JSON ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pressure
                Path("data/json/synop_data_pressure.json").write_text(
                    "{}", encoding="utf-8"
                )

                decoder = CheckCodeAAXXFull2()

                try:
                    # ‚úÖ ‡∏´‡πà‡∏≠ content ‡πÄ‡∏õ‡πá‡∏ô dict ‡πÄ‡∏™‡∏°‡∏≠ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á dict ‡πÅ‡∏•‡∏∞ str)
                    if not isinstance(content, dict):
                        content = {date_text: content}

                    decoded = decoder.decodeAAXX(content, index, save_to_file=True)
                    # self.pressure_data.update({d["date"]: d for d in decoded})
                    for d in decoded:
                        date = d["date"]
                        if date not in self.pressure_data:
                            self.pressure_data[date] = []
                        self.pressure_data[date].append(d)

                except Exception as e:
                    self.append_debugger(f"‚ùå Decode Error: {e}")
                    logger.error(f"‚ùå Decode Error: {e}")
                    return

                # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
                self.append_debugger("----------------------------------------")
                if isinstance(content, dict):
                    for d, text in content.items():
                        self.append_debugger(f"üìÖ {d} >>>>>>>>>>>>>>>>>>\n{text}")
                else:
                    self.append_debugger(content)

                self.append_debugger("----------------------------------------")
                self.append_debugger(
                    f"üü¢ Checking synoptic data: {date_text} | {time_text}: {msg}"
                )
                logger.info(
                    f"üü¢ Checking synoptic data: {date_text} | {time_text}: {msg}"
                )

                # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï QML ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                # self.view.rootObject().setProperty("isDataLoaded", True)
                self.dataLoadedChanged.emit(True)

            else:
                # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï QML ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
                # self.view.rootObject().setProperty("isDataLoaded", False)
                self.dataLoadedChanged.emit(False)

                self.append_debugger(
                    f"‚ùå Checking synoptic data: {date_text} | {time_text}: {msg}"
                )
                logger.error(
                    f"‚ùå Checking synoptic data: {date_text} | {time_text}: {msg}"
                )
                return

        elif tab_index == 2:
            self.detail_data = {}
            index = tab_index

            try:
                self.append_debugger(
                    "üîÑ Loading detail data from file."
                    if self.check_open_file_detail
                    else "üîÑ Loading detail data from URL."
                )
                logger.info(
                    "üîÑ Loading detail data from file."
                    if self.check_open_file_detail
                    else "üîÑ Loading detail data from URL."
                )

                check = CheckURLDetail()
                content, msg = check.urlGetContent(
                    time_text[0:4],
                    date_text,
                    self.detail_text if self.check_open_file_detail else None,
                )

                self.append_debugger(f"üü¢ CheckURLDetail Complete")
                logger.info(f"üü¢ CheckURLDetail Complete")

            except Exception as e:
                self.append_debugger(f"‚ùå Error while loading detail data:\n{e}")
                logger.error(f"‚ùå Error while loading detail data:\n{e}")
                return

            if content != "NIL":
                # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå JSON ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• detail
                Path("data/json/synop_data_detail.json").write_text(
                    "{}", encoding="utf-8"
                )

                decoder = CheckCodeAAXXFull()

                try:
                    if isinstance(content, dict):
                        for d, text in content.items():
                            decoded = decoder.decodeAAXX(text, index, d)
                            self.detail_data[d] = decoded
                    else:
                        # ‚úÖ ‡∏´‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô dict ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ decode
                        decoded = decoder.decodeAAXX(
                            {date_text: content}, index, save_to_file=True
                        )
                        self.detail_data[date_text] = decoded

                except Exception as e:
                    self.append_debugger(f"‚ùå Decode Error: {e}")
                    logger.error(f"‚ùå Decode Error: {e}")
                    return

                # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
                self.append_debugger("----------------------------------------")
                if isinstance(content, dict):
                    for d, text in content.items():
                        self.append_debugger(f"üìÖ {d}\n{text}")
                else:
                    self.append_debugger(content)

                self.append_debugger("----------------------------------------")
                self.append_debugger(
                    f"üü¢ Checking synoptic data: {date_text} | {time_text}: {msg}"
                )
                logger.info(
                    f"üü¢ Checking synoptic data: {date_text} | {time_text}: {msg}"
                )

                # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï QML ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                # self.view.rootObject().setProperty("isDataLoaded", True)
                self.dataLoadedChanged.emit(True)

            else:
                # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï QML ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
                # self.view.rootObject().setProperty("isDataLoaded", False)
                self.dataLoadedChanged.emit(False)

                self.append_debugger(
                    f"‚ùå Checking synoptic data: {date_text} | {time_text}: {msg}"
                )
                logger.error(
                    f"‚ùå Checking synoptic data: {date_text} | {time_text}: {msg}"
                )
                return

        elif tab_index == 3:
            self.upperwind1_data = {}
            index = tab_index

            try:
                self.append_debugger(
                    "üîÑ Loading upperwind1 data from file."
                    if self.check_open_file_upperwind1
                    else "üîÑ Loading upperwind1 data from URL."
                )
                logger.info(
                    "üîÑ Loading upperwind1 data from file."
                    if self.check_open_file_upperwind1
                    else "üîÑ Loading upperwind1 data from URL."
                )

                check = CheckURLUpperWind()
                content, msg = check.urlGetContent(
                    time_text[0:4],
                    date_text,
                    self.upperwind1_text if self.check_open_file_upperwind1 else None,
                )

                self.append_debugger(f"üü¢ CheckURLUpperWind Complete")
                logger.info(f"üü¢ CheckURLUpperWind Complete")

            except Exception as e:
                self.append_debugger(f"‚ùå Error while loading upperwind data:\n{e}")
                logger.error(f"‚ùå Error while loading upperwind data:\n{e}")
                return

            if content != "NIL":
                # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå JSON ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• upperwind1
                Path("data/json/synop_data_upperwind_1.json").write_text(
                    "{}", encoding="utf-8"
                )

                decoder = CheckCodeUpperWind()

                try:
                    decoded = decoder.decode_from_dict(
                        content, time=time_text, date=date_text
                    )
                    self.upperwind1_data[date_text] = decoded

                    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå JSON ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• upperwind1
                    with open(
                        "data/json/synop_data_upperwind_1.json", "w", encoding="utf-8"
                    ) as f:
                        json.dump(self.upperwind1_data, f, ensure_ascii=False, indent=2)

                    # decoder.save_decoded_to_json(
                    #    {date_text: decoded}, time_text, date_text
                    # )

                except Exception as e:
                    self.append_debugger(f"‚ùå Decode Error: {e}")
                    logger.error(f"‚ùå Decode Error: {e}")

                # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
                self.append_debugger("----------------------------------------")
                if isinstance(content, dict):
                    for d, text in content.items():
                        self.append_debugger(f"üÜî {d}\n{text}")
                else:
                    self.append_debugger(content)

                self.append_debugger("----------------------------------------")
                self.append_debugger(
                    f"üü¢ Checking synoptic data: {date_text} | {time_text}: {msg}"
                )
                logger.info(
                    f"üü¢ Checking synoptic data: {date_text} | {time_text}: {msg}"
                )

                # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï QML ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                # self.view.rootObject().setProperty("isDataLoaded", True)
                self.dataLoadedChanged.emit(True)

            else:
                # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï QML ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
                # self.view.rootObject().setProperty("isDataLoaded", False)
                self.dataLoadedChanged.emit(False)

                self.append_debugger(
                    f"‚ùå Checking synoptic data: {date_text} | {time_text}: {msg}"
                )
                logger.error(
                    f"‚ùå Checking synoptic data: {date_text} | {time_text}: {msg}"
                )
                return

        elif tab_index == 4:
            self.upperwind2_data = {}
            index = tab_index

            try:
                self.append_debugger(
                    "üîÑ Loading upperwind2 data from file."
                    if self.check_open_file_upperwind2
                    else "üîÑ Loading upperwind2 data from URL."
                )
                logger.info(
                    "üîÑ Loading upperwind2 data from file."
                    if self.check_open_file_upperwind2
                    else "üîÑ Loading upperwind2 data from URL."
                )

                check = CheckURLUpperWind()
                content, msg = check.urlGetContent(
                    time_text[0:4],
                    date_text,
                    self.upperwind2_text if self.check_open_file_upperwind2 else None,
                )
                self.append_debugger(f"üü¢ CheckURLUpperWind Complete")
                logger.info(f"üü¢ CheckURLUpperWind Complete")

            except Exception as e:
                self.append_debugger(f"‚ùå Error while loading detail data:\n{e}")
                logger.error(f"‚ùå Error while loading detail data:\n{e}")
                return

            if content != "NIL":
                # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå JSON ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• upperwind2
                Path("data/json/synop_data_upperwind_2.json").write_text(
                    "{}", encoding="utf-8"
                )

                # ‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô CheckCodeUpperWind
                decoder = CheckCodeUpperWind()

                try:
                    decoded = decoder.decode_from_dict(
                        content, time=time_text, date=date_text
                    )
                    self.upperwind2_data[date_text] = decoded
                    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå JSON ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• upperwind2
                    with open(
                        "data/json/synop_data_upperwind_2.json", "w", encoding="utf-8"
                    ) as f:
                        json.dump(self.upperwind2_data, f, ensure_ascii=False, indent=2)

                    # ‚úÖ Save JSON ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÅ‡∏Ñ‡πà‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                    # decoder.save_decoded_to_json(
                    #    {date_text: decoded}, time_text, date_text
                    # )

                except Exception as e:
                    self.append_debugger(f"‚ùå Decode Error: {e}")
                    logger.error(f"‚ùå Decode Error: {e}")

                # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
                self.append_debugger("----------------------------------------")
                if isinstance(content, dict):
                    for d, text in content.items():
                        self.append_debugger(f"üÜî {d}\n{text}")
                else:
                    self.append_debugger(content)

                self.append_debugger("----------------------------------------")
                self.append_debugger(
                    f"üü¢ Checking synoptic data: {date_text} | {time_text}: {msg}"
                )
                logger.info(
                    f"üü¢ Checking synoptic data: {date_text} | {time_text}: {msg}"
                )

                # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï QML ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                # self.view.rootObject().setProperty("isDataLoaded", True)
                self.dataLoadedChanged.emit(True)

            else:
                # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï QML ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
                # self.view.rootObject().setProperty("isDataLoaded", False)
                self.dataLoadedChanged.emit(False)

                self.append_debugger(
                    f"‚ùå Checking synoptic data: {date_text} | {time_text}: {msg}"
                )
                logger.error(
                    f"‚ùå Checking synoptic data: {date_text} | {time_text}: {msg}"
                )
                return

        elif tab_index == 5:
            self.skewt_data = {}
            index = tab_index

            try:
                self.append_debugger(
                    "üîÑ Loading skewt data from file."
                    if self.check_open_file_skewt
                    else "üîÑ Loading skewt data from URL."
                )
                logger.info(
                    "üîÑ Loading skewt data from file."
                    if self.check_open_file_skewt
                    else "üîÑ Loading skewt data from URL."
                )

                check = CheckURLSkewT()
                content, msg = check.urlGetContent(
                    time_text[0:4],
                    date_text,
                    station_filter[0:5],
                    self.skewt_text if self.check_open_file_skewt else None,
                )

                # logger.info(f"üåê DEBUG: content={content}")
                self.append_debugger(f"üü¢ CheckURLUpperWind Complete")
                logger.info(f"üü¢ CheckURLUpperWind Complete")

            except Exception as e:
                self.append_debugger(f"‚ùå Error while loading detail data:\n{e}")
                logger.error(f"‚ùå Error while loading detail data:\n{e}")
                return

            if content != "NIL":
                # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå JSON ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• skewt
                Path("data/json/synop_data_skewt.json").write_text(
                    "{}", encoding="utf-8"
                )

                try:
                    # ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô CheckCodeTTAA
                    decode_ttaa = CheckCodeTTAA()
                    resultTTAA = decode_ttaa.decodeTTAA(
                        content[station_filter[0:5]]["TTAA"]
                    )
                    # logger.info(f"‚úÖ TTAA Decoded: {resultTTAA}")

                except Exception as e:
                    self.append_debugger(f"‚ùå TTAA Decode Error: {e}")
                    logger.error(f"‚ùå TTAA Decode Error: {e}")
                    return

                try:
                    # ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô CheckCodeTTBB
                    decode_ttbb = CheckCodeTTBB()
                    resultTTBB = decode_ttbb.decodeTTBB(
                        content[station_filter[0:5]]["TTBB"]
                    )
                    # logger.info(f"‚úÖ TTBB Decoded: {resultTTBB}")

                except Exception as e:
                    self.append_debugger(f"‚ùå TTBB Decode Error: {e}")
                    logger.error(f"‚ùå TTBB Decode Error: {e}")
                    return

                try:
                    # ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô CheckArrayTEMP
                    decode_temp = CheckArrayTEMP()
                    resultArrayTEMP = decode_temp.decodeArrayTEMP(
                        resultTTAA["temp"], resultTTBB["temp"]
                    )
                    # logger.info(f"‚úÖ TEMP Decoded: {resultArrayTEMP}")

                except Exception as e:
                    self.append_debugger(f"‚ùå TEMP Decode Error: {e}")
                    logger.error(f"‚ùå TEMP Decode Error: {e}")
                    return

                try:
                    # ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô CheckArrayWND
                    decode_wnd = CheckArrayWND()
                    resultArrayWND = decode_wnd.decodeArrayWND(
                        resultTTAA["wnd"], resultTTBB["wnd"]
                    )
                    # logger.info(f"‚úÖ WIND Decoded: {resultArrayWND}")

                except Exception as e:
                    self.append_debugger(f"‚ùå WIND Decode Error: {e}")
                    logger.error(f"‚ùå WIND Decode Error: {e}")
                    return

                try:
                    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
                    station_id = station_filter[0:5]
                    date_str = date_text
                    time_str = time_text
                    timestamp = f"{datetime.now().isoformat()}LST"

                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á JSON
                    output_json = {
                        date_str: {
                            "time": time_str,
                            "timestamp": timestamp,
                            station_id: {
                                "TEMP": resultArrayTEMP,
                                "WIND": resultArrayWND,
                            },
                        }
                    }

                    self.skewt_data = output_json
                    # logger.info(f"‚úÖ Skew-T Data: {output_json}")

                    # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå JSON
                    script_dir = os.path.dirname(
                        os.path.abspath(__file__)
                    )  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå .py
                    output_path = os.path.join(
                        script_dir, "../../data/json/synop_data_skewt.json"
                    )

                    with open(output_path, "w", encoding="utf-8") as f:
                        json.dump(output_json, f, indent=2, ensure_ascii=False)

                    self.append_debugger(f"‚úÖ JSON saved to {output_path}")
                    logger.info(f"‚úÖ JSON saved to {output_path}")

                except Exception as e:
                    self.append_debugger(f"‚ùå JSON Save Error: {e}")
                    logger.error(f"‚ùå JSON Save Error: {e}")
                    return

                # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
                self.append_debugger("----------------------------------------")
                if isinstance(content, dict):
                    for d, text in content.items():
                        self.append_debugger(f"üÜî {d}\n{text}")
                else:
                    self.append_debugger(content)

                self.append_debugger("----------------------------------------")
                self.append_debugger(
                    f"üü¢ Checking synoptic data: {date_text} | {time_text}: {msg}"
                )
                logger.info(
                    f"üü¢ Checking synoptic data: {date_text} | {time_text}: {msg}"
                )

                # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï QML ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                # self.view.rootObject().setProperty("isDataLoaded", True)
                self.dataLoadedChanged.emit(True)

            else:
                # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï QML ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
                # self.view.rootObject().setProperty("isDataLoaded", False)
                self.dataLoadedChanged.emit(False)

                self.append_debugger(
                    f"‚ùå Checking synoptic data: {date_text} | {time_text}: {msg}"
                )
                logger.error(
                    f"‚ùå Checking synoptic data: {date_text} | {time_text}: {msg}"
                )
                return

        else:
            self.view.rootObject().setProperty("isDataLoaded", False)
            self.append_debugger(f"‚ùå Error: Invalid tab index {tab_index}.")
            logger.error(f"‚ùå Error: Invalid tab index {tab_index}.")
            return

    @Slot(int)
    def table_view(self, tab_index: int = 0):
        # üü° ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Table Viewer
        index = tab_index
        tab_names = [
            "Surface ‡∏≠‡∏ï.‡∏ó‡∏≠. 1001",
            "Pressure Change ‡∏≠‡∏ï.‡∏ó‡∏≠. 1010",
            "Detail ‡∏≠‡∏ï.‡∏ó‡∏≠. 1003",
            "Upper Wind Air - 1 ‡∏≠‡∏ï.‡∏ó‡∏≠. 1002",
            "Upper Wind Air - 2 ‡∏≠‡∏ï.‡∏ó‡∏≠. 1013",
            "Skew-T Log-P Diagram - ‡∏≠‡∏ï.‡∏ó‡∏≠. 1011",
        ]

        self.append_debugger(f"üìä Opening Table Viewer: {tab_names[index]}")
        logger.info(f"üìä Opening Table Viewer: {tab_names[index]}")

        data_sources = [
            getattr(self, "surface_data", {}),
            getattr(self, "pressure_data", {}),
            getattr(self, "detail_data", {}),
            getattr(self, "upperwind1_data", {}),
            getattr(self, "upperwind2_data", {}),
            getattr(self, "skewt_data", {}),
        ]

        try:
            raw_data = data_sources[index]
            tab_name = tab_names[index]

            if index in [0, 1, 2]:  # Surface / Pressure / Detail
                data = self._flatten_by_date(raw_data)
                self.table_window = TableViewSynoptic(tab_name=tab_name, data=data)

            elif index in [3, 4]:  # Upper Wind
                self.table_window = TableViewUpperWind(tab_name=tab_name, data=raw_data)
                # print("üåê DEBUG:", raw_data)
            elif index == 5:  # Skew-T
                self.table_window = TableViewSkewT(tab_name=tab_name, data=raw_data)
            #    return

            self.table_window.show()

        except Exception as e:
            self.append_debugger(f"‚ùå TableView Error: {e}")
            logger.error(f"‚ùå TableView Error: {e}")
            return

    def _flatten_by_date(self, raw_data: dict) -> list:
        """
        ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• dict[date] => list[dict ‡∏û‡∏£‡πâ‡∏≠‡∏° date]
        """
        data = []
        for date_str, entries in raw_data.items():
            if isinstance(entries, list):
                for entry in entries:
                    if isinstance(entry, dict):
                        row = entry.copy()
                        row["date"] = date_str
                        data.append(row)
                    else:
                        logger.warning(
                            f"‚ö†Ô∏è Invalid entry type: {type(entry)} for {date_str}"
                        )
            else:
                logger.warning(f"‚ö†Ô∏è Expected list, got {type(entries)} at {date_str}")
        return data

    @Slot(str, str, str, int)
    def save_pdf(
        self,
        date_text: str = "",
        time_text: str = "",
        station_id: str = "",
        tab_index: int = 0,
    ):
        # üü° ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô PNG
        index = tab_index
        tab_names = [
            "Surface Map",
            "Pressure Change Map",
            "Detail Map",
            "Upper Wind Air - 1 Map",
            "Upper Wind Air - 2 Map",
            "Skew-T Log-P Diagram Map",
        ]

        self.append_debugger(f"üìÑ Saving as PDF: {tab_names[index]}")
        logger.info(f"üìÑ Saving as PDF: {tab_names[index]}")

        # üìç ‡πÄ‡∏õ‡∏¥‡∏î dialog ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
        file_path, _ = QFileDialog.getSaveFileName(
            self,
            f"Save PDF - {tab_names[index]}",
            f"{tab_names[index].replace(' ', '_')}_{station_id[0:5]}_{date_text}_{time_text[0:4]}UTC.pdf",
            "PDF Files (*.pdf)",
        )

        if not file_path:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            self.append_debugger("‚ùå ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
            logger.info("‚ùå ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
            return

        if index in [0, 1, 2, 3, 4]:
            self.append_debugger("‚ùå SkewT ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå PDF")
            logger.info("‚ùå SkewT ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå PDF")
            return
        else:
            # üî∏ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö‡∏≠‡∏∑‡πà‡∏ô
            # üìç ‡∏´‡∏≤ path ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå .py ‡∏ô‡∏µ‡πâ
            script_dir = os.path.dirname(os.path.abspath(__file__))
            # logger.info(f"üìÇ Current script directory: {script_dir}")

            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
            destination_files = [
                os.path.join(script_dir, "../../output/map/pdf/surface.pdf"),
                os.path.join(script_dir, "../../output/map/pdf/pressure.pdf"),
                os.path.join(script_dir, "../../output/map/pdf/detail.pdf"),
                os.path.join(script_dir, "../../output/map/pdf/upperwind1.pdf"),
                os.path.join(script_dir, "../../output/map/pdf/upperwind2.pdf"),
                os.path.join(script_dir, "../../output/map/pdf/skewt.pdf"),
            ]
            # logger.info(f"üìÇ Destination files: {destination_files}")

            source_file = destination_files[index]
            if os.path.exists(source_file):
                try:
                    shutil.copy(source_file, file_path)
                    self.append_debugger(f"üìÑ Saving as PDF: {file_path}")
                    logger.info(f"üìÑ Saving as PDF: {file_path}")
                except Exception as e:
                    self.append_debugger(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å PDF: {e}")
                    logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å PDF: {e}")
            else:
                self.append_debugger(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö {tab_names[index]}")
                logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö {tab_names[index]}")
                return

    @Slot(str, str, int)
    def save_png(
        self,
        date_text: str = "",
        time_text: str = "",
        tab_index: int = 0,
    ):
        # üü° ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô PNG
        index = tab_index
        tab_names = [
            "Surface Map",
            "Pressure Change Map",
            "Detail Map",
            "Upper Wind Air - 1 Map",
            "Upper Wind Air - 2 Map",
            "Skew-T Log-P Diagram Map",
        ]

        self.append_debugger(f"üì∏ Saving as PNG: {tab_names[index]}")
        logger.info(f"üì∏ Saving as PNG: {tab_names[index]}")

        # üìç ‡πÄ‡∏õ‡∏¥‡∏î dialog ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
        file_path, _ = QFileDialog.getSaveFileName(
            self,
            f"Save PNG - {tab_names[index]}",
            f"{tab_names[index].replace(' ', '_')}_{date_text}_{time_text[0:4]}UTC.png",
            "PNG Files (*.png)",
        )

        if not file_path:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            self.append_debugger("‚ùå ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
            logger.info("‚ùå ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
            return

        if index == 5:
            self.append_debugger("‚ùå SkewT ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
            logger.info("‚ùå SkewT ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
            return
        else:
            # üî∏ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö‡∏≠‡∏∑‡πà‡∏ô
            # üìç ‡∏´‡∏≤ path ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå .py ‡∏ô‡∏µ‡πâ
            script_dir = os.path.dirname(os.path.abspath(__file__))
            # logger.info(f"üìÇ Current script directory: {script_dir}")

            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
            destination_files = [
                os.path.join(script_dir, "../../output/map/surface.png"),
                os.path.join(script_dir, "../../output/map/pressure.png"),
                os.path.join(script_dir, "../../output/map/detail.png"),
                os.path.join(script_dir, "../../output/map/upperwind1.png"),
                os.path.join(script_dir, "../../output/map/upperwind2.png"),
                os.path.join(script_dir, "../../output/map/skewt.png"),
            ]
            # logger.info(f"üìÇ Destination files: {destination_files}")

            source_file = destination_files[index]
            if os.path.exists(source_file):
                try:
                    shutil.copy(source_file, file_path)
                    self.append_debugger(f"üì∏ Saving as PNG: {file_path}")
                    logger.info(f"üì∏ Saving as PNG: {file_path}")
                except Exception as e:
                    self.append_debugger(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å PNG: {e}")
                    logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å PNG: {e}")
            else:
                self.append_debugger(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö {tab_names[index]}")
                logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö {tab_names[index]}")
                return

    @Slot(int)
    def open_text_file(self, tab_index: int = 0):
        # üü° ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        file_path, _ = QFileDialog.getOpenFileName(
            self, "Open Text File", "", "Text Files (*.txt)"
        )

        if not file_path:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            self.append_debugger("‚ùå ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
            logger.info("‚ùå ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
            return

        self.append_debugger(f"üìÇ Opening text file: {file_path}")
        logger.info(f"üìÇ Opening text file: {file_path}")

        content = ""
        index = tab_index

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ tab_index ‡πÄ‡∏õ‡πá‡∏ô int ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if file_path:
            try:
                with open(file_path, "r", encoding="utf-8") as f:
                    content = f.read()  # ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á ‡πÜ

                if not content.strip():  # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
                    self.append_debugger("‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤")
                    logger.error("‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤")

                else:
                    # ‡πÅ‡∏¢‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÅ‡∏ó‡πá‡∏ö
                    if index == 0:
                        self.surface_text = content
                        self.check_open_file_surface = True
                    elif index == 1:
                        self.pressure_text = content
                        self.check_open_file_pressure = True
                    elif index == 2:
                        self.detail_text = content
                        self.check_open_file_detail = True
                    elif index == 3:
                        self.upperwind1_text = content
                        self.check_open_file_upperwind1 = True
                    elif index == 4:
                        self.upperwind2_text = content
                        self.check_open_file_upperwind2 = True
                    elif index == 5:
                        self.skewt_text = content
                        self.check_open_file_skewt = True

                self.update_debugger(f"üìÇ Opened: {file_path}\n-----------\n{content}")
                logger.info(f"üìÇ Opened: {file_path}")

                # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï QML ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                # self.view.rootObject().setProperty("dataCheckURL", True)
                self.dataCheckURL.emit(True)

            except Exception as e:
                self.append_debugger(f"‚ùå Error reading file: {e}")
                logger.error(f"‚ùå Error reading file: {e}")

    def update_debugger(self, message: str):
        # üü° ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô debugger
        if self.view and self.view.rootObject():
            self.view.rootObject().setProperty("debugText", message)

    def append_debugger(self, new_line: str):
        if not self.view or not self.view.rootObject():
            logger.warning("‚ö†Ô∏è QML view not ready, cannot append debugger text.")
            return

        root_obj = self.view.rootObject()
        debug_area = root_obj.findChild(QObject, "debugTextArea")

        if debug_area is None:
            logger.warning("‚ö†Ô∏è debugTextArea not found in QML.")
            return

        current = debug_area.property("text")
        # ‚úÖ ‡∏ñ‡πâ‡∏≤ current ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‚Üí ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏•‡∏¢
        if not current or current.strip() == "":
            combined = new_line
        else:
            combined = f"{current}\n{new_line}"

        # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô QML
        debug_area.setProperty("text", combined)

    def update_image_source(self, tab_name: str, file_url: str):
        self.imagePathChanged.emit(tab_name, file_url)

    @Slot()
    def check_connection(self):
        url = QUrl("http://www.gts.tmd.go.th/")
        request = QNetworkRequest(url)
        self.append_debugger("üåê Checking connection to TMD website...")
        self.manager.head(request)  # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö reply ‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

    @Slot(QNetworkReply)
    def _on_connection_checked(self, reply: QNetworkReply):
        if reply.error() == QNetworkReply.NetworkError.NoError:
            self.append_debugger(
                "üü¢ Connection successful to TMD website: http://www.gts.tmd.go.th/"
            )
            logger.info(
                "üü¢ Connection successfuly to TMD website: http://www.gts.tmd.go.th/"
            )
            self.dataCheckURL.emit(True)

        else:
            self.append_debugger(f"‚ùå Connection failed: {reply.errorString()}")
            logger.error(f"‚ùå Connection failed: {reply.errorString()}")
            self.dataCheckURL.emit(False)

        reply.deleteLater()

    @Slot(int)
    def convert_a3(self, tab_index: int = 0):
        # üü° Convert to PDF A3
        index = tab_index
        tab_names = [
            "Surface Map",
            "Pressure Change Map",
            "Detail Map",
            "Upper Wind Air - 1 Map",
            "Upper Wind Air - 2 Map",
            "Skew-T Log-P Diagram Map",
        ]

        self.append_debugger(f"‚è≥ Convert A3: {tab_names[index]}")
        logger.info(f"‚è≥ Convert A3: {tab_names[index]}")

        map_name = ""
        if index == 3:
            map_name = "upperwind1"
        elif index == 4:
            map_name = "upperwind2"
        else:
            map_name = "unknow"

        # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå .py
        script_dir = os.path.dirname(os.path.abspath(__file__))
        output_file = os.path.join(script_dir, "../../output/map/" + map_name + ".png")
        output_file_1 = os.path.join(
            script_dir, "../../output/map/pdf/" + map_name + ".pdf"
        )
        output_file_2 = os.path.join(
            script_dir, "../../output/map/" + map_name + "_891x420mm_300dpi.png"
        )

        # üîß ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
        img = Image.open(output_file)
        if not os.path.exists(output_file):
            self.append_debugger(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û: {output_file}")
            logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û: {output_file}")
            return

        # ‡∏Ç‡∏ô‡∏≤‡∏î A3 ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á √ó 3 ‡πÅ‡∏ú‡πà‡∏ô "mm": (891, 420), "inch": (35.08, 16.54), "px_300dpi": (10524, 4961) ‡∏ó‡∏µ‡πà 300 DPI
        target_size_a3 = (10524, 4961)

        # ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á
        resized_img_a3 = img.resize(target_size_a3, Image.Resampling.LANCZOS)

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô PNG ‡∏û‡∏£‡πâ‡∏≠‡∏° DPI 300
        resized_img_a3.save(output_file_2, dpi=(300, 300))

        # üîß ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö (‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 14,883 px ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 3 ‡∏´‡∏ô‡πâ‡∏≤ A3 ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á)
        img_a3 = Image.open(output_file_2)

        # === ‡∏Ç‡∏ô‡∏≤‡∏î A3 ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 300 DPI ===
        page_width = 3508
        page_height = 4961

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û
        width, height = img_a3.size
        self.append_debugger(f"‚úÖ Original size 891x420mm: {img_a3.size}")
        logger.info(
            f"‚úÖ Original size 891x420mm: {img_a3.size}"
        )  # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: (3508, 14883)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏î 3 ‡∏´‡∏ô‡πâ‡∏≤
        pages = []  # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
        if width < page_width * 3:
            self.append_debugger("‚ùå ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 3 ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á")
            logger.info("‚ùå ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 3 ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á")
            return

        else:
            # === ‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô 3 ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ï‡πà‡∏≠‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö)
            for i in range(3):
                left = i * page_width
                right = min(left + page_width, width)
                self.append_debugger(f"üî™ Cutting page {i+1}: {left}px to {right}px")
                logger.info(f"üî™ Cutting page {i+1}: {left}px to {right}px")

                cropped = img_a3.crop((left, 0, right, height))
                cropped = cropped.resize(
                    (page_width, page_height)
                )  # ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤
                # cropped.save(f"page_{i+1}.png")
                pages.append(cropped.convert("RGB"))

            # === ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô PDF 3 ‡∏´‡∏ô‡πâ‡∏≤
            if pages:
                pages[0].save(output_file_1, save_all=True, append_images=pages[1:])
                self.convertA3.emit(True)
                self.append_debugger(f"‚úÖ PDF created: {output_file_1}")
                logger.info(f"‚úÖ PDF created: {output_file_1}")
            else:
                self.convertA3.emit(False)
                self.append_debugger("‚ùå No valid pages to save!")
                logger.error("‚ùå No valid pages to save!")
                return

    @Slot(str, str, int)
    def save_a3(self, date_text: str = "", time_text: str = "", tab_index: int = 0):
        # üü° Convert to PDF A3
        index = tab_index
        tab_names = [
            "Surface Map",
            "Pressure Change Map",
            "Detail Map",
            "Upper Wind Air - 1 Map",
            "Upper Wind Air - 2 Map",
            "Skew-T Log-P Diagram Map",
        ]

        self.append_debugger(f"‚è≥ Save File PDF A3: {tab_names[index]}")
        logger.info(f"‚è≥ Save File PDF A3: {tab_names[index]}")

        # üìç ‡πÄ‡∏õ‡∏¥‡∏î dialog ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
        file_path, _ = QFileDialog.getSaveFileName(
            self,
            f"Save PDF A3 - {tab_names[index]}",
            f"{tab_names[index].replace(' ', '_')}_{date_text}_{time_text[0:4]}UTC_A3.pdf",
            "PDF Files (*.pdf)",
        )

        if not file_path:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            self.append_debugger("‚ùå ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
            logger.info("‚ùå ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
            return

        else:
            # üî∏ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö‡∏≠‡∏∑‡πà‡∏ô
            # üìç ‡∏´‡∏≤ path ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå .py ‡∏ô‡∏µ‡πâ
            script_dir = os.path.dirname(os.path.abspath(__file__))
            # logger.info(f"üìÇ Current script directory: {script_dir}")

            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
            destination_files = [
                os.path.join(script_dir, "../../output/map/pdf/surface.pdf"),
                os.path.join(script_dir, "../../output/map/pdf/pressure.pdf"),
                os.path.join(script_dir, "../../output/map/pdf/detail.pdf"),
                os.path.join(script_dir, "../../output/map/pdf/upperwind1.pdf"),
                os.path.join(script_dir, "../../output/map/pdf/upperwind2.pdf"),
                os.path.join(script_dir, "../../output/map/pdf/skewt.pdf"),
            ]
            # logger.info(f"üìÇ Destination files: {destination_files}")

            source_file = destination_files[index]
            if os.path.exists(source_file):
                try:
                    shutil.copy(source_file, file_path)
                    self.append_debugger(f"üìÑ Saving as PDF: {file_path}")
                    logger.info(f"üìÑ Saving as PDF: {file_path}")
                except Exception as e:
                    self.append_debugger(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å PDF: {e}")
                    logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å PDF: {e}")
                    return
            else:
                self.append_debugger(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö {tab_names[index]}")
                logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö {tab_names[index]}")
                return
