import os
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import cartopy.feature as cfeature
from matplotlib.ticker import MultipleLocator
from cartopy.mpl.gridliner import LONGITUDE_FORMATTER, LATITUDE_FORMATTER
from PIL import Image
import numpy as np
import cartopy.io.shapereader as shpreader
from cartopy.feature import ShapelyFeature
import matplotlib.ticker as mticker
from cartopy.io import DownloadWarning
import warnings
import sys
import io

# ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö stdout ‡πÄ‡∏õ‡πá‡∏ô utf-8 (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Windows)
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding="utf-8")

script_dir = os.path.dirname(os.path.abspath(__file__))  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå .py
logo_path = os.path.join(script_dir, "../../images/icons/sfc-2.png")
output_file = os.path.join(script_dir, "../../output/upperwind.png")
output_file_2 = os.path.join(script_dir, "../../output/upperwind1.pdf")

# ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
paper_size = {"‡∏≠‡∏ï.‡∏ó‡∏≠.1002": (27.36, 16.54)}  # 695 √ó 420 mm

# === ‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û ===
dpi = 300
dpi_2 = 600
dpi_3 = 600
# width_px = 5772
# height_px = 4024
# width_in = width_px / dpi
# height_in = height_px / dpi

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
paper_key = "‡∏≠‡∏ï.‡∏ó‡∏≠.1002"  # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: "‡∏≠‡∏ï.‡∏ó‡∏≠.1003"
# logger.info(f"üìÑ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©: {paper_key}")

# ‡∏î‡∏∂‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
if paper_key in paper_size:
    width_in, height_in = paper_size[paper_key]
    # logger.info(f"üìè ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©: {width_in} x {height_in} ‡∏ô‡∏¥‡πâ‡∏ß")
else:
    # logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©: {paper_key}")
    raise ValueError(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©: {paper_key}")

# === ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ===
fig = plt.figure(figsize=(width_in, height_in), dpi=dpi)

# ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
ncols = 3
nrows = 2

axes = []  # ‡πÄ‡∏Å‡πá‡∏ö ax ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

# === ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≠‡∏ö‡∏£‡∏≠‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞ spacing
margin_x = 0.005  # (‡∏Ç‡∏≠‡∏ö‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤) ‡∏™‡∏±‡∏Å 1.5%
margin_y = 0.075  # (‡∏Ç‡∏≠‡∏ö‡∏ö‡∏ô-‡∏•‡πà‡∏≤‡∏á) 1.5% - ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏Å
# margin_y = 0.05  # (‡∏Ç‡∏≠‡∏ö‡∏ö‡∏ô-‡∏•‡πà‡∏≤‡∏á) 1.5% - ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏≠‡∏á
spacing_x = 0.005  # (‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô) 2%
spacing_y = 0.005  # (‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á) 2%

# === ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
available_width = 1 - 2 * margin_x
available_height = 1 - 2 * margin_y

# === ‡πÄ‡∏≠‡∏≤ spacing ‡∏°‡∏≤‡∏Ñ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢
cell_width = (available_width - (ncols - 1) * spacing_x) / ncols
cell_height = (available_height - (nrows - 1) * spacing_y) / nrows

for row in range(nrows):
    for col in range(ncols):
        left = margin_x + col * (cell_width + spacing_x)
        bottom = margin_y + (nrows - 1 - row) * (cell_height + spacing_y)  # üõë ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        ax = fig.add_axes(
            [left, bottom, cell_width, cell_height],
            projection=ccrs.PlateCarree(),
        )
        axes.append(ax)

levels_target = [850, 500, 300, 700, 400, 200]
level_labels = [
    "850 hPa.",
    "500 hPa.",
    "300 hPa.",
    "700 hPa.",
    "400 hPa.",
    "200 hPa.",
]

# levels_target = [2000, 5000, 7000, 10000, 15000, 20000]
# level_labels = [
#    "2000 ft.",
#    "5000 ft.",
#    "10000 ft.",
#    "7000 ft.",
#    "15000 ft.",
#    "20000 ft.",
# ]


# === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏° ===
def _add_map_features(ax, cartopy_data_path):
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á, ‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô, ‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏∞‡πÄ‡∏•‡∏•‡∏á‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà"""
    boundary_path = os.path.join(
        cartopy_data_path, "ne_50m_admin_0_boundary_lines_land.shp"
    )
    coast_path = os.path.join(cartopy_data_path, "ne_50m_coastline.shp")
    countries_path = os.path.join(cartopy_data_path, "ne_110m_admin_0_countries.shp")
    marine_path = os.path.join(cartopy_data_path, "ne_10m_geography_marine_polys.shp")

    # ‚úÖ ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    ax.add_feature(cfeature.LAND, facecolor="navajowhite", alpha=0.1)  # ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô (‡∏™‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠)
    ax.add_feature(
        cfeature.OCEAN,
        facecolor="lightblue",
        alpha=0.1,
    )  # ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏ô‡πâ‡∏≥ (‡πÄ‡∏á‡∏¥‡∏ô‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡πà‡∏≠‡∏ô)

    try:
        # ‚úÖ ‡∏û‡∏•‡πá‡∏≠‡∏ï‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô (BORDERS)
        if os.path.exists(boundary_path):
            borders = shpreader.Reader(boundary_path)
            ax.add_geometries(
                borders.geometries(),
                crs=ccrs.PlateCarree(),
                edgecolor="#a3a3a3",
                facecolor="none",
                linewidth=0.2,
            )
        else:
            ax.add_feature(cfeature.BORDERS, linewidth=0.2, edgecolor="#a3a3a3")

    except Exception as e:
        print(f"‚ùå Failed to add borders: {e}")

    try:
        # ‚úÖ ‡∏û‡∏•‡πá‡∏≠‡∏ï‡πÅ‡∏ô‡∏ß‡∏ä‡∏≤‡∏¢‡∏ù‡∏±‡πà‡∏á (COASTLINE)
        if os.path.exists(coast_path):
            coast = shpreader.Reader(coast_path)
            ax.add_geometries(
                coast.geometries(),
                crs=ccrs.PlateCarree(),
                edgecolor="#a3a3a3",
                facecolor="none",
                linewidth=0.2,
            )
        else:
            ax.add_feature(cfeature.COASTLINE, linewidth=0.2, edgecolor="#a3a3a3")

    except Exception as e:
        print(f"‚ùå Failed to add coastline: {e}")

    try:
        # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        west, east, south, north = ax.get_extent(ccrs.PlateCarree())

        # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà)
        if os.path.exists(countries_path):
            reader = shpreader.Reader(countries_path)
            for country in reader.records():
                lon, lat = country.geometry.centroid.coords[0]
                name = country.attributes["NAME"]

                # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                if west + 2 <= lon <= east - 2 and south <= lat <= north:
                    ax.text(
                        lon,
                        lat,
                        name,
                        fontsize=5,
                        ha="center",
                        clip_on=True,  # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¢‡∏Ç‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                        transform=ccrs.PlateCarree(),
                        color="grey",
                        alpha=0.5,
                    )

    except Exception as e:
        print(f"‚ùå Failed to add country names: {e}")

    try:
        # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        west, east, south, north = ax.get_extent(ccrs.PlateCarree())

        # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏∞‡πÄ‡∏•, ‡∏≠‡πà‡∏≤‡∏ß, ‡πÅ‡∏•‡∏∞‡∏°‡∏´‡∏≤‡∏™‡∏°‡∏∏‡∏ó‡∏£
        if os.path.exists(marine_path):
            reader = shpreader.Reader(marine_path)
            for marine in reader.records():
                lon, lat = marine.geometry.centroid.coords[0]

                # ‚úÖ ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå keys ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏î‡∏π
                # print(marine.attributes.keys())

                # ‚úÖ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ key ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏∞‡πÄ‡∏•/‡∏≠‡πà‡∏≤‡∏ß
                name = marine.attributes.get("NAME", "") or marine.attributes.get(
                    "name", ""
                )

                if name and west <= lon <= east and south <= lat <= north:
                    ax.text(
                        lon,
                        lat,
                        name,
                        fontsize=1.5,
                        alpha=0.3,
                        color="darkblue",
                        ha="center",
                        clip_on=True,  # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                        transform=ccrs.PlateCarree(),
                    )

    except Exception as e:
        print(f"‚ùå Failed to add sea names: {e}")


def _add_default_features(ax):
    # ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
    print("üåê ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏°‡∏û‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‚Üí ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏à‡∏≤‡∏Å Natural Earth (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...)")

    # ‡∏õ‡∏¥‡∏î‡πÅ‡∏™‡∏î‡∏á warning ‡∏ã‡πâ‡∏≥ ‡πÜ
    warnings.simplefilter("default", DownloadWarning)

    ax.add_feature(cfeature.BORDERS, linewidth=0.2, edgecolor="#a3a3a3")
    ax.add_feature(cfeature.COASTLINE, linewidth=0.2, edgecolor="#a3a3a3")

    # ‚úÖ ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    ax.add_feature(cfeature.LAND, facecolor="navajowhite")  # ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô (‡∏™‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠)
    ax.add_feature(cfeature.OCEAN, facecolor="lightblue")  # ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏ô‡πâ‡∏≥ (‡πÄ‡∏á‡∏¥‡∏ô‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡πà‡∏≠‡∏ô)


def _add_thailand_borderline_only(ax, cartopy_data_path, linewidth=0.5):
    shapefile_path = os.path.join(cartopy_data_path, "ne_50m_admin_0_countries.shp")

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô
    color = "darkred"

    try:
        reader = shpreader.Reader(shapefile_path)

        thailand_shape = [
            record.geometry
            for record in reader.records()
            if record.attributes.get("NAME") == "Thailand"
        ]

        if thailand_shape:
            border = ShapelyFeature(
                thailand_shape,
                ccrs.PlateCarree(),
                edgecolor=color,
                facecolor="none",
                linewidth=linewidth,
                zorder=6,
            )
            ax.add_feature(border)
        else:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô shapefile ‡∏ô‡∏µ‡πâ")

    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢: {e}")


def _add_inner_latlon_labels(ax, interval=5, color="black", fontsize=0.5):
    # ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏¥‡∏î (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
    gl = ax.gridlines(
        crs=ccrs.PlateCarree(),
        draw_labels=False,
        linewidth=0.5,
        color=color,
        alpha=0.5,
        linestyle="--",
        zorder=4,
    )
    gl.xlocator = mticker.MultipleLocator(interval)
    gl.ylocator = mticker.MultipleLocator(interval)

    # ‡∏î‡∏∂‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    extent = ax.get_extent(ccrs.PlateCarree())
    west, east, south, north = extent

    # ‡∏õ‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏£ interval ‡∏•‡∏á‡∏ï‡∏±‡∏ß
    def next_divisible_by(x, base):
        return x if x % base == 0 else x + (base - (x % base))

    lon_start = next_divisible_by(np.floor(west), interval)
    lat_start = next_divisible_by(np.floor(south), interval)

    lon_ticks = np.arange(lon_start, np.ceil(east) + interval, interval)
    lat_ticks = np.arange(lat_start, np.ceil(north) + interval, interval)

    # ‡∏£‡∏∞‡∏¢‡∏∞‡∏Ç‡∏¢‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö
    dx = (east - west) * 0.005
    dy = (north - south) * 0.015

    start = 1

    # ‡∏ß‡∏≤‡∏î label ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î (‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö)
    for lon in lon_ticks[start:-1]:
        if west <= lon <= east:
            y_pos = south + dy
            if south < y_pos < north:
                label = (
                    f"{abs(int(round(lon)))}¬∞E"
                    if lon >= 0
                    else f"{abs(int(round(lon)))}¬∞W"
                )
                ax.text(
                    lon,
                    y_pos,
                    label,
                    fontsize=fontsize,
                    color="#AAAAAA",
                    ha="center",
                    va="bottom",
                    transform=ccrs.PlateCarree(),
                    # bbox=dict(facecolor="white", alpha=1.0, edgecolor="none"),
                    zorder=10,
                )

    # ‡∏ß‡∏≤‡∏î label ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î (‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏ã‡πâ‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö)
    for lat in lat_ticks[start:-1]:
        if south <= lat <= north:
            x_pos = west + dx
            if west < x_pos < east:
                label = (
                    f"{abs(int(round(lat)))}¬∞N"
                    if lat >= 0
                    else f"{abs(int(round(lat)))}¬∞S"
                )
                ax.text(
                    x_pos,
                    lat,
                    label,
                    fontsize=fontsize,
                    color="#AAAAAA",
                    ha="left",
                    va="center",
                    transform=ccrs.PlateCarree(),
                    # bbox=dict(facecolor="white", alpha=1.0, edgecolor="none"),
                    zorder=10,
                )


# === ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á ===
for idx, ax in enumerate(axes):
    # === ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏Å
    # ‡∏ó‡∏¥‡∏®‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏∏‡πâ‡∏á 45 ‡∏≠‡∏á‡∏®‡∏≤‡πÄ‡∏´‡∏ô‡∏∑‡∏≠, ‡∏ó‡∏¥‡∏®‡πÉ‡∏ï‡πâ ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏∏‡πâ‡∏á -15 ‡∏≠‡∏á‡∏®‡∏≤‡πÉ‡∏ï‡πâ, ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ß‡∏á 145 ‡∏≠‡∏á‡∏®‡∏≤‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å, ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ß‡∏á 60 ‡∏≠‡∏á‡∏®‡∏≤‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å
    ax.set_extent([60.0, 145.0, 45.0, -15.0], crs=ccrs.PlateCarree())

    # === ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏≠‡∏á
    # ‡∏ó‡∏¥‡∏®‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏∏‡πâ‡∏á 25 ‡∏≠‡∏á‡∏®‡∏≤‡πÄ‡∏´‡∏ô‡∏∑‡∏≠, ‡∏ó‡∏¥‡∏®‡πÉ‡∏ï‡πâ ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏∏‡πâ‡∏á 5 ‡∏≠‡∏á‡∏®‡∏≤‡πÉ‡∏ï‡πâ, ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ß‡∏á 125 ‡∏≠‡∏á‡∏®‡∏≤‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å, ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ß‡∏á 85 ‡∏≠‡∏á‡∏®‡∏≤‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å
    # ax.set_extent([85.0, 125.0, 25.0, -5.0], crs=ccrs.PlateCarree())

    # === ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡∏ô
    # ax.set_title(
    #    f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á {level_labels[idx]}",
    #    fontsize=8,
    #    loc="left",
    #    pad=0.5,
    # )

    if idx < 3:
        if idx == 1:
            ax.set_title("     ", fontsize=32)
    else:
        ax.set_title("", fontsize=0)

    # === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
    cartopy_data_path = None
    if not cartopy_data_path:
        script_dir = os.path.dirname(os.path.abspath(__file__))  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå .py
        cartopy_data_path = os.path.join(script_dir, "../../data/cartopy")

    # === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå shapefile ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    shapefiles_found = (
        any(
            fname.endswith((".shp", ".dbf", ".shx"))
            for fname in os.listdir(cartopy_data_path)
        )
        if os.path.isdir(cartopy_data_path)
        else False
    )

    # üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if shapefiles_found:
        os.environ["CARTOPY_USER_BACKGROUNDS"] = cartopy_data_path
        os.environ["CARTOPY_USER_SHAPEFILES"] = cartopy_data_path
        print("‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á:", cartopy_data_path)
    else:
        print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏°‡∏û‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‚Üí ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏à‡∏≤‡∏Å Natural Earth")

    # === ‡πÅ‡∏¢‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏û‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    if shapefiles_found:
        _add_map_features(ax, cartopy_data_path)
    else:
        _add_default_features(ax)

    # === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á polygon)
    _add_thailand_borderline_only(ax, cartopy_data_path, linewidth=0.5)

    # === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏¥‡∏î lat/lon
    _add_inner_latlon_labels(ax, interval=5, color="gray", fontsize=7)

    # === ‡∏ß‡∏≤‡∏á‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ‡∏î‡πâ‡∏ß‡∏¢ ax.imshow()
    logo_img = Image.open(logo_path)

    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ ~1 ‡∏ô‡∏¥‡πâ‡∏ß ‡∏Å‡∏ß‡πâ‡∏≤‡∏á
    logo_width_in = 1.0
    logo_width_px = int(logo_width_in * dpi)
    logo_height_px = int(logo_img.height * (logo_width_px / logo_img.width))
    logo_resized = logo_img.resize((logo_width_px, logo_height_px))
    logo_array = np.asarray(logo_resized)

    # ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡∏ß‡∏≤‡∏á (‡∏°‡∏∏‡∏°‡∏•‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢) ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏Å
    logo_lon = 65
    logo_lat = -10

    # ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡∏ß‡∏≤‡∏á (‡∏°‡∏∏‡∏°‡∏•‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢) ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏≠‡∏á
    # logo_lon = 86.5
    # logo_lat = -3.5

    # ‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏≠‡∏á‡∏®‡∏≤ (‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ) ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏Å
    logo_width_deg = 8
    logo_height_deg = 8 * (logo_resized.height / logo_resized.width)

    # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏•‡∏á‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏≠‡∏á
    # logo_width_deg = 4  # ‡πÄ‡∏î‡∏¥‡∏° 8 ‚Üí ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏£‡∏∂‡πà‡∏á
    # logo_height_deg = logo_width_deg * (logo_resized.height / logo_resized.width)

    # ‡∏ß‡∏≤‡∏á‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ö‡∏ô‡πÅ‡∏Å‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    ax.imshow(
        logo_array,
        extent=[
            logo_lon,
            logo_lon + logo_width_deg,
            logo_lat,
            logo_lat + logo_height_deg,
        ],
        transform=ccrs.PlateCarree(),
        zorder=10,
        interpolation="bicubic",  # ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏†‡∏≤‡∏û
        # interpolation="bilinear",     # ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (‡∏î‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ)
        # interpolation="bicubic",      # ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏°‡∏≤‡∏Å
        # interpolation="lanczos",      # ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏°‡∏≤‡∏Å (‡∏ä‡∏±‡∏î‡∏™‡∏∏‡∏î‡πÅ‡∏ï‡πà‡∏ä‡πâ‡∏≤)
        # interpolation="nearest",      # ‡∏ä‡∏±‡∏î ‡πÅ‡∏ï‡πà‡∏´‡∏¢‡∏±‡∏Å (‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö)
    )

    # === ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏Å ===
    ax.text(
        69.25,
        -9.0,
        f"{level_labels[idx]}",
        transform=ccrs.PlateCarree(),
        fontsize=10,
        fontweight="bold",
        color="blue",
        ha="center",
        va="bottom",
        zorder=11,
    )

    # === ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏≠‡∏á ===
    # ax.text(
    #    88.5,
    #    -3.0,
    #    f"{level_labels[idx]}",
    #    transform=ccrs.PlateCarree(),
    #    fontsize=10,
    #    fontweight="bold",
    #    color="blue",
    #    ha="center",
    #    va="bottom",
    #    zorder=11,
    # )

# === ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏Å ===
ax.text(
    -0.5,
    2.13,  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô (x=0.5 ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏•‡∏≤‡∏á, y>1 ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ plot)
    f"Upper Wind - hPa.",
    transform=ax.transAxes,  # ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏Å‡∏ô Axes (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏≤‡∏á‡∏†‡∏π‡∏°‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå)
    fontsize=32,
    fontweight="bold",
    color="blue",
    ha="center",
    va="bottom",
)

# === ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏≠‡∏á ===
# ax.text(
#    -0.5,
#    2.125,  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô (x=0.5 ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏•‡∏≤‡∏á, y>1 ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ plot)
#    f"Upper Wind - ft.",
#    transform=ax.transAxes,  # ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏Å‡∏ô Axes (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏≤‡∏á‡∏†‡∏π‡∏°‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå)
#    fontsize=32,
#    fontweight="bold",
#    color="blue",
#    ha="center",
#    va="bottom",
# )

# DPI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö export ‡∏ä‡∏±‡∏î
plt.rcParams["savefig.dpi"] = 600

# === ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô PNG ===
plt.savefig(output_file, dpi=dpi, bbox_inches="tight")

# === ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô PDF ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á ===
# plt.savefig(output_file_2, dpi=dpi_2, bbox_inches="tight")
plt.close()

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
img = Image.open(output_file)
print(f"Dimensions: {img.size} px")
print(f"DPI: {img.info.get('dpi')}")
