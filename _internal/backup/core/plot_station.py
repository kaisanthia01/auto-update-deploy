import os
import json
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import numpy as np
import xarray as xr
import pandas as pd
import cartopy.io.shapereader as shpreader
import warnings
from cartopy.io import DownloadWarning
from metpy.plots import StationPlot
from metpy.calc import reduce_point_density
from metpy.plots.wx_symbols import (
    current_weather,
    sky_cover,
    low_clouds,
    mid_clouds,
    high_clouds,
)
from metpy.units import units  # üî• ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!
from pyproj import Transformer
from PyQt6.QtWidgets import QApplication
from cartopy.geodesic import Geodesic
from cartopy.feature import ShapelyFeature
import matplotlib.ticker as mticker
import re
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
from PIL import Image
from datetime import datetime

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
script_dir = os.path.dirname(os.path.realpath(__file__))
fonts_data_path = os.path.join(script_dir, "..", "fonts")
font_path = os.path.join(fonts_data_path, "THSarabun.ttf")
font_bold_path = os.path.join(fonts_data_path, "THSarabun-Bold.ttf")
prop = (
    fm.FontProperties(fname=font_path, size=10) if os.path.exists(font_path) else None
)
prop_bold = (
    fm.FontProperties(fname=font_bold_path, size=10)
    if os.path.exists(font_bold_path)
    else None
)


class PlotStation:
    def __init__(self, main_window, splash=None):
        self.figure = None
        self.ax = None
        self.main_window = main_window
        self.splash = splash

        base_dir = os.path.join(script_dir, "..")
        # ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
        self.json_station_world_file = os.path.join(
            base_dir, "json", "synop_station_world_list.json"
        )

        # ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Plot
        self.json_data_surface_file = os.path.join(
            base_dir, "json", "synop_data_surface.json"
        )
        self.json_data_pressure_file = os.path.join(
            base_dir, "json", "synop_data_pressure.json"
        )
        self.json_data_detail_file = os.path.join(
            base_dir, "json", "synop_data_detail.json"
        )
        self.json_data_upperwind_file = os.path.join(
            base_dir, "json", "synop_data_upperwind.json"
        )

        # ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÅ‡∏•‡πâ‡∏ß
        self.json_data_plot_surface_file = os.path.join(
            base_dir, "json", "synop_data_plot_surface.json"
        )
        self.json_data_plot_pressure_file = os.path.join(
            base_dir, "json", "synop_data_plot_pressure.json"
        )
        self.json_data_plot_detail_file = os.path.join(
            base_dir, "json", "synop_data_plot_detail.json"
        )
        self.json_data_plot_upperwind1_file = os.path.join(
            base_dir, "json", "synop_data_plot_upperwind1.json"
        )
        self.json_data_plot_upperwind2_file = os.path.join(
            base_dir, "json", "synop_data_plot_upperwind2.json"
        )

    @staticmethod
    def safe_slice_int(s: str, start: int, end: int, default: int = 0) -> int:
        try:
            return int(s[start:end])
        except (ValueError, TypeError, IndexError):
            return default

    @staticmethod
    def safe_slice_float(
        s: str, start: int, end: int, scale: float = 1.0, default: float = 0.0
    ) -> float:
        try:
            return float(s[start:end]) * scale
        except (ValueError, TypeError, IndexError):
            return default

    def create_map(self, type_map, cartopy_data_path=None):
        if not cartopy_data_path:
            script_dir = os.path.dirname(os.path.abspath(__file__))
            cartopy_data_path = os.path.join(script_dir, "..", "cartopy")

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå shapefile ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        shapefiles_found = (
            any(
                fname.endswith((".shp", ".dbf", ".shx"))
                for fname in os.listdir(cartopy_data_path)
            )
            if os.path.isdir(cartopy_data_path)
            else False
        )

        # üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if shapefiles_found:
            os.environ["CARTOPY_USER_BACKGROUNDS"] = cartopy_data_path
            os.environ["CARTOPY_USER_SHAPEFILES"] = cartopy_data_path
            print("‚úÖ ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á:", cartopy_data_path)
        else:
            print("üåê ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏°‡∏û‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‚Üí ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏à‡∏≤‡∏Å Natural Earth")

        # DPI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö export ‡∏ä‡∏±‡∏î
        plt.rcParams["savefig.dpi"] = 600

        # ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
        paper_size = {
            "‡∏≠‡∏ï.‡∏ó‡∏≠. 1001": (38.58, 29.92),  # 980 √ó 760 mm
            "‡∏≠‡∏ï.‡∏ó‡∏≠. 1002": (27.36, 16.54),  # 695 √ó 420 mm
            "‡∏≠‡∏ï.‡∏ó‡∏≠. 1010": (25.39, 17.52),  # 645 √ó 445 mm
            "‡∏≠‡∏ï.‡∏ó‡∏≠. 1013": (29.53, 18.90),  # 750 √ó 480 mm
        }

        # üîπ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ)
        selected_paper = "‡∏≠‡∏ï.‡∏ó‡∏≠. 1001"  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏Ç‡∏ô‡∏≤‡∏î 980 √ó 760 mm
        fig_width, fig_height = paper_size[selected_paper]

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á figure ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        self.figure, ax = plt.subplots(
            # figsize=(980 / 25.4, 760 / 25.4),  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ set_size_inches()
            figsize=(fig_width, fig_height),  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ
            subplot_kw={"projection": ccrs.PlateCarree()},
            facecolor="#F0F7FF",
            # constrained_layout=False,
            constrained_layout=True,  # ‚úÖ ‡πÉ‡∏ä‡πâ constrained_layout ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        )

        # ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≤‡∏ü‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å 0.5 ‡∏ô‡∏¥‡πâ‡∏ß ‡∏£‡∏≠‡∏ö‡∏Ç‡∏≠‡∏ö
        # ‚úÖ ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏ö 0.5 ‡∏ô‡∏¥‡πâ‡∏ß (‡∏ó‡∏±‡πâ‡∏á 4 ‡∏î‡πâ‡∏≤‡∏ô)
        # fig_width = self.figure.get_figwidth()
        # fig_height = self.figure.get_figheight()
        # ax.set_position(
        #    [
        #        0.5 / fig_width,  # left
        #        0.5 / fig_height,  # bottom
        #        (fig_width - 1.0)
        #        / fig_width,  # width after removing 0.5 inch from left+right
        #        (fig_height - 1.0) / fig_height,  # height after removing top+bottom
        #    ]
        # )

        self.ax = ax  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ self.ax ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ

        self._set_map_extent(ax, type_map)

        # ‚úÖ ‡πÅ‡∏¢‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏û‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
        if shapefiles_found:
            self._add_map_features(ax, cartopy_data_path, type_map)
        else:
            self._add_default_features(ax, type_map)

        # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á polygon)
        self._add_thailand_borderline_only(
            ax, cartopy_data_path, type_map, linewidth=0.5
        )

        # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏¥‡∏î
        self._add_inner_latlon_labels(
            ax, type_map, interval=5, color="gray", fontsize=7
        )

        self.add_logo(
            self.ax, os.path.join(script_dir, "..", "icons", "sfc-2.png"), type_map
        )

        return self.figure, ax

    def create_upperwind_combined_map(self, type_map):
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ DPI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏≤‡∏ü ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
        plt.rcParams["savefig.dpi"] = 600

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á figure ‡∏Ç‡∏ô‡∏≤‡∏î A4 ‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
        fig_combined, axes = plt.subplots(
            2,
            3,
            figsize=(11.7, 8.3),  # A4 landscape
            subplot_kw={"projection": ccrs.PlateCarree()},
            facecolor="#F0F7FF",
            constrained_layout=True,
        )

        level_labels = [
            "850 hPa",
            "500 hPa",
            "300 hPa",
            "700 hPa",
            "400 hPa",
            "200 hPa",
        ]

        level_labels_2 = [
            "2000 ft.",
            "5000 ft.",
            "10000 ft.",
            "7000 ft.",
            "15000 ft.",
            "20000 ft.",
        ]

        cartopy_data_path = os.path.join(os.path.dirname(__file__), "..", "cartopy")

        # üîé ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ shapefile ‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        shapefiles_found = (
            any(
                fname.endswith((".shp", ".dbf", ".shx"))
                for fname in os.listdir(cartopy_data_path)
            )
            if os.path.isdir(cartopy_data_path)
            else False
        )

        if shapefiles_found:
            print("‚úÖ ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á:", cartopy_data_path)
        else:
            print("üåê ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏°‡∏û‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‚Üí ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏à‡∏≤‡∏Å Natural Earth")

        for i, ax in enumerate(axes.flat):
            self._set_map_extent(ax, type_map)
            ax.set_title("", fontsize=10)

            # üîÄ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
            if shapefiles_found:
                self._add_map_features(ax, cartopy_data_path, type_map)
            else:
                self._add_default_features(ax, type_map)

            # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á polygon)
            self._add_thailand_borderline_only(
                ax, cartopy_data_path, type_map, linewidth=0.5
            )

            # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏¥‡∏î
            self._add_inner_latlon_labels(
                ax, type_map, interval=5, color="gray", fontsize=7
            )

            self.add_logo(
                ax, os.path.join(script_dir, "..", "icons", "wind-2.png"), type_map
            )

            if type_map == 4:
                west, east, south, north = ax.get_extent(ccrs.PlateCarree())
                x_text = west + (east - west) * 0.170
                y_text = south + (north - south) * 0.130
                ax.text(
                    x_text,
                    y_text,
                    level_labels[i],
                    fontsize=7,
                    fontweight="bold",
                    color="blue",
                    ha="center",
                    va="center",
                    transform=ccrs.PlateCarree(),
                    zorder=30,
                )
            else:
                west, east, south, north = ax.get_extent(ccrs.PlateCarree())
                x_text = west + (east - west) * 0.170
                y_text = south + (north - south) * 0.130
                ax.text(
                    x_text,
                    y_text,
                    level_labels_2[i],
                    fontsize=7,
                    fontweight="bold",
                    color="blue",
                    ha="center",
                    va="center",
                    transform=ccrs.PlateCarree(),
                    zorder=30,
                )

        return fig_combined, axes.flatten().tolist()

    def _set_map_extent(self, ax, type_map):
        if self.splash:
            self.splash.label.setText("üó∫Ô∏è Setting up Latitude and Longitude")
            QApplication.processEvents()

        if type_map in [1, 2]:  # ‡∏ú‡∏¥‡∏ß‡∏û‡∏∑‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
            # ‡∏ó‡∏¥‡∏®‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏∏‡πâ‡∏á 50 ‡∏≠‡∏á‡∏®‡∏≤‡πÄ‡∏´‡∏ô‡∏∑‡∏≠, ‡∏ó‡∏¥‡∏®‡πÉ‡∏ï‡πâ ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏∏‡πâ‡∏á -31 ‡∏≠‡∏á‡∏®‡∏≤‡πÉ‡∏ï‡πâ, ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ß‡∏á 160 ‡∏≠‡∏á‡∏®‡∏≤‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å, ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ß‡∏á 45 ‡∏≠‡∏á‡∏®‡∏≤‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å
            ax.set_extent([45.0, 160.0, 50.0, -30.0], crs=ccrs.PlateCarree())
        elif type_map == 4:  # ‡∏•‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏Å
            # ‡∏ó‡∏¥‡∏®‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏∏‡πâ‡∏á 45 ‡∏≠‡∏á‡∏®‡∏≤‡πÄ‡∏´‡∏ô‡∏∑‡∏≠, ‡∏ó‡∏¥‡∏®‡πÉ‡∏ï‡πâ ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏∏‡πâ‡∏á -15 ‡∏≠‡∏á‡∏®‡∏≤‡πÉ‡∏ï‡πâ, ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ß‡∏á 145 ‡∏≠‡∏á‡∏®‡∏≤‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å, ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ß‡∏á 60 ‡∏≠‡∏á‡∏®‡∏≤‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å
            ax.set_extent([60.0, 145.0, 45.0, -15.0], crs=ccrs.PlateCarree())
        elif type_map == 5:  # ‡∏•‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏≠‡∏á
            # ‡∏ó‡∏¥‡∏®‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏∏‡πâ‡∏á 25 ‡∏≠‡∏á‡∏®‡∏≤‡πÄ‡∏´‡∏ô‡∏∑‡∏≠, ‡∏ó‡∏¥‡∏®‡πÉ‡∏ï‡πâ ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏∏‡πâ‡∏á 5 ‡∏≠‡∏á‡∏®‡∏≤‡πÉ‡∏ï‡πâ, ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ß‡∏á 125 ‡∏≠‡∏á‡∏®‡∏≤‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å, ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ß‡∏á 85 ‡∏≠‡∏á‡∏®‡∏≤‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å
            ax.set_extent([85.0, 125.0, 25.0, -5.0], crs=ccrs.PlateCarree())
        else:  # ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
            # ‡∏ó‡∏¥‡∏®‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏∏‡πâ‡∏á -1.5 ‡∏≠‡∏á‡∏®‡∏≤‡πÄ‡∏´‡∏ô‡∏∑‡∏≠, ‡∏ó‡∏¥‡∏®‡πÉ‡∏ï‡πâ ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏∏‡πâ‡∏á 24.5 ‡∏≠‡∏á‡∏®‡∏≤‡πÉ‡∏ï‡πâ, ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ß‡∏á 111.2 ‡∏≠‡∏á‡∏®‡∏≤‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å, ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ß‡∏á 93 ‡∏≠‡∏á‡∏®‡∏≤‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å
            ax.set_extent([93.0, 111.2, -1.5, 24.5], crs=ccrs.PlateCarree())

    def _add_map_features(self, ax, cartopy_data_path, type_map):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á, ‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô, ‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏∞‡πÄ‡∏•‡∏•‡∏á‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà"""

        boundary_path = os.path.join(
            cartopy_data_path, "ne_50m_admin_0_boundary_lines_land.shp"
        )
        coast_path = os.path.join(cartopy_data_path, "ne_50m_coastline.shp")
        countries_path = os.path.join(
            cartopy_data_path, "ne_110m_admin_0_countries.shp"
        )
        marine_path = os.path.join(
            cartopy_data_path, "ne_10m_geography_marine_polys.shp"
        )

        # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Splash Screen
        if self.splash:
            self.splash.label.setText("üó∫Ô∏è Downloading Map Features...")
            QApplication.processEvents()

        # ‚úÖ ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        if type_map == 1:
            ax.add_feature(
                cfeature.LAND, facecolor="navajowhite", alpha=0.1
            )  # ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô (‡∏™‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠)
            ax.add_feature(
                cfeature.OCEAN,
                facecolor="lightblue",
                alpha=0.1,
            )  # ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏ô‡πâ‡∏≥ (‡πÄ‡∏á‡∏¥‡∏ô‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡πà‡∏≠‡∏ô)

        try:
            # ‚úÖ ‡∏û‡∏•‡πá‡∏≠‡∏ï‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô (BORDERS)
            if os.path.exists(boundary_path):
                borders = shpreader.Reader(boundary_path)
                ax.add_geometries(
                    borders.geometries(),
                    crs=ccrs.PlateCarree(),
                    edgecolor="#a3a3a3",
                    facecolor="none",
                    linewidth=0.2,
                )
            else:
                ax.add_feature(cfeature.BORDERS, linewidth=0.2, edgecolor="#a3a3a3")

        except Exception as e:
            print(f"‚ùå Failed to add borders: {e}")

        try:
            # ‚úÖ ‡∏û‡∏•‡πá‡∏≠‡∏ï‡πÅ‡∏ô‡∏ß‡∏ä‡∏≤‡∏¢‡∏ù‡∏±‡πà‡∏á (COASTLINE)
            if os.path.exists(coast_path):
                coast = shpreader.Reader(coast_path)
                ax.add_geometries(
                    coast.geometries(),
                    crs=ccrs.PlateCarree(),
                    edgecolor="#a3a3a3",
                    facecolor="none",
                    linewidth=0.2,
                )
            else:
                ax.add_feature(cfeature.COASTLINE, linewidth=0.2, edgecolor="#a3a3a3")

        except Exception as e:
            print(f"‚ùå Failed to add coastline: {e}")

        try:
            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
            west, east, south, north = ax.get_extent(ccrs.PlateCarree())

            # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà)
            if os.path.exists(countries_path):
                reader = shpreader.Reader(countries_path)
                for country in reader.records():
                    lon, lat = country.geometry.centroid.coords[0]
                    name = country.attributes["NAME"]

                    # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                    if west + 2 <= lon <= east - 2 and south <= lat <= north:
                        ax.text(
                            lon,
                            lat,
                            name,
                            fontsize=5,
                            ha="center",
                            clip_on=True,  # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¢‡∏Ç‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                            transform=ccrs.PlateCarree(),
                            color="grey",
                            alpha=0.5,
                        )

        except Exception as e:
            print(f"‚ùå Failed to add country names: {e}")

        try:
            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
            west, east, south, north = ax.get_extent(ccrs.PlateCarree())

            # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏∞‡πÄ‡∏•, ‡∏≠‡πà‡∏≤‡∏ß, ‡πÅ‡∏•‡∏∞‡∏°‡∏´‡∏≤‡∏™‡∏°‡∏∏‡∏ó‡∏£
            if os.path.exists(marine_path):
                reader = shpreader.Reader(marine_path)
                for marine in reader.records():
                    lon, lat = marine.geometry.centroid.coords[0]

                    # ‚úÖ ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå keys ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏î‡∏π
                    # print(marine.attributes.keys())

                    # ‚úÖ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ key ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏∞‡πÄ‡∏•/‡∏≠‡πà‡∏≤‡∏ß
                    name = marine.attributes.get("NAME", "") or marine.attributes.get(
                        "name", ""
                    )

                    if name and west <= lon <= east and south <= lat <= north:
                        ax.text(
                            lon,
                            lat,
                            name,
                            fontsize=1.5,
                            alpha=0.3,
                            color="darkblue",
                            ha="center",
                            clip_on=True,  # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                            transform=ccrs.PlateCarree(),
                        )

        except Exception as e:
            print(f"‚ùå Failed to add sea names: {e}")

    def _add_default_features(self, ax, type_map):
        if self.splash:
            self.splash.label.setText("üåê Downloading Online Natural Earth")
            QApplication.processEvents()

        # ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
        print("üåê ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏°‡∏û‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‚Üí ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏à‡∏≤‡∏Å Natural Earth (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...)")

        # ‡∏õ‡∏¥‡∏î‡πÅ‡∏™‡∏î‡∏á warning ‡∏ã‡πâ‡∏≥ ‡πÜ
        warnings.simplefilter("default", DownloadWarning)

        ax.add_feature(cfeature.BORDERS, linewidth=0.2, edgecolor="#a3a3a3")
        ax.add_feature(cfeature.COASTLINE, linewidth=0.2, edgecolor="#a3a3a3")

        # ‚úÖ ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        if type_map == 1:
            ax.add_feature(cfeature.LAND, facecolor="navajowhite")  # ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô (‡∏™‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠)
            ax.add_feature(
                cfeature.OCEAN, facecolor="lightblue"
            )  # ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏ô‡πâ‡∏≥ (‡πÄ‡∏á‡∏¥‡∏ô‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡πà‡∏≠‡∏ô)

        # ax.add_feature(cfeature.LAND, facecolor="navajowhite")
        # ax.add_feature(cfeature.OCEAN, facecolor="lightblue")
        # ax.add_feature(cfeature.LAKES, facecolor="aliceblue")
        # ax.add_feature(cfeature.RIVERS, edgecolor="lightblue", linewidth=0.4)
        # ax.gridlines(draw_labels=True, linewidth=0.3, color="gray", linestyle="--")

    def _add_thailand_borderline_only(
        self, ax, cartopy_data_path, type_map, linewidth=0.5
    ):
        shapefile_path = os.path.join(cartopy_data_path, "ne_50m_admin_0_countries.shp")

        if type_map in [1, 4, 5]:
            color = "darkred"
        elif type_map == 2:
            color = "black"
        else:
            color = "darkgreen"

        try:
            reader = shpreader.Reader(shapefile_path)

            thailand_shape = [
                record.geometry
                for record in reader.records()
                if record.attributes.get("NAME") == "Thailand"
            ]

            if thailand_shape:
                border = ShapelyFeature(
                    thailand_shape,
                    ccrs.PlateCarree(),
                    edgecolor=color,
                    facecolor="none",
                    linewidth=linewidth,
                    zorder=6,
                )
                ax.add_feature(border)
            else:
                print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô shapefile ‡∏ô‡∏µ‡πâ")

        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢: {e}")

    def _add_inner_latlon_labels(
        self, ax, type_map, interval=5, color="black", fontsize=0.5
    ):
        # ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏¥‡∏î (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
        gl = ax.gridlines(
            crs=ccrs.PlateCarree(),
            draw_labels=False,
            linewidth=0.5,
            color=color,
            alpha=0.5,
            linestyle="--",
            zorder=4,
        )
        gl.xlocator = mticker.MultipleLocator(interval)
        gl.ylocator = mticker.MultipleLocator(interval)

        # ‡∏î‡∏∂‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        extent = ax.get_extent(ccrs.PlateCarree())
        west, east, south, north = extent

        # ‡∏õ‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏£ interval ‡∏•‡∏á‡∏ï‡∏±‡∏ß
        def next_divisible_by(x, base):
            return x if x % base == 0 else x + (base - (x % base))

        lon_start = next_divisible_by(np.floor(west), interval)
        lat_start = next_divisible_by(np.floor(south), interval)

        lon_ticks = np.arange(lon_start, np.ceil(east) + interval, interval)
        lat_ticks = np.arange(lat_start, np.ceil(north) + interval, interval)

        # ‡∏£‡∏∞‡∏¢‡∏∞‡∏Ç‡∏¢‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö
        dx = (east - west) * 0.005
        dy = (north - south) * 0.015

        if type_map == 3:
            start = 0
        else:
            start = 1

        # ‡∏ß‡∏≤‡∏î label ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î (‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö)
        for lon in lon_ticks[start:-1]:
            if west <= lon <= east:
                y_pos = south + dy
                if south < y_pos < north:
                    if type_map in [4, 5]:
                        if int(round(lon)) % 10 == 0:
                            label = (
                                f"{abs(int(round(lon)))}¬∞E"
                                if lon >= 0
                                else f"{abs(int(round(lon)))}¬∞W"
                            )
                            ax.text(
                                lon,
                                y_pos,
                                label,
                                fontsize=3,
                                color="#AAAAAA",
                                ha="center",
                                va="bottom",
                                transform=ccrs.PlateCarree(),
                                # bbox=dict(
                                #    facecolor="grey",
                                #    alpha=0.2,
                                #    edgecolor="none",
                                #    boxstyle="round,pad=0.2",
                                # ),
                                zorder=10,
                            )
                    else:
                        label = (
                            f"{abs(int(round(lon)))}¬∞E"
                            if lon >= 0
                            else f"{abs(int(round(lon)))}¬∞W"
                        )
                        ax.text(
                            lon,
                            y_pos,
                            label,
                            fontsize=fontsize,
                            fontproperties=prop_bold,
                            color="#AAAAAA",
                            ha="center",
                            va="bottom",
                            transform=ccrs.PlateCarree(),
                            # bbox=dict(facecolor="white", alpha=1.0, edgecolor="none"),
                            zorder=10,
                        )

        # ‡∏ß‡∏≤‡∏î label ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î (‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏ã‡πâ‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö)
        for lat in lat_ticks[start:-1]:
            if south <= lat <= north:
                x_pos = west + dx
                if west < x_pos < east:
                    if type_map in [4, 5]:
                        if int(round(lat)) % 10 == 0:
                            label = (
                                f"{abs(int(round(lat)))}¬∞N"
                                if lat >= 0
                                else f"{abs(int(round(lat)))}¬∞S"
                            )
                            ax.text(
                                x_pos + 0.5,
                                lat,
                                label,
                                fontsize=3,
                                color="#AAAAAA",
                                ha="left",
                                va="center",
                                transform=ccrs.PlateCarree(),
                                # bbox=dict(
                                #    facecolor="grey",
                                #    alpha=0.2,
                                #    edgecolor="none",
                                #    boxstyle="round,pad=0.2",
                                # ),
                                zorder=10,
                            )
                    else:
                        label = (
                            f"{abs(int(round(lat)))}¬∞N"
                            if lat >= 0
                            else f"{abs(int(round(lat)))}¬∞S"
                        )
                        ax.text(
                            x_pos,
                            lat,
                            label,
                            fontsize=fontsize,
                            fontproperties=prop_bold,
                            color="#AAAAAA",
                            ha="left",
                            va="center",
                            transform=ccrs.PlateCarree(),
                            # bbox=dict(facecolor="white", alpha=1.0, edgecolor="none"),
                            zorder=10,
                        )

    def add_logo(self, ax, logo_path, type_map, zoom=0.03):
        """‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏∏‡∏°‡∏•‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà"""
        try:
            if type_map == 3:
                zoom = 0.02
            elif type_map in [3, 4, 5]:
                zoom = 0.015

            img = Image.open(logo_path)
            imagebox = OffsetImage(img, zoom=zoom, dpi_cor=True)

            # ‡∏î‡∏∂‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
            extent = ax.get_extent(ccrs.PlateCarree())
            west, east, south, north = extent

            # ‡∏ß‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏°‡∏∏‡∏°‡∏•‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢ (‡∏Ç‡∏¢‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)
            x = west + (east - west) * 0.1
            y = south + (north - south) * 0.1

            ab = AnnotationBbox(
                imagebox,
                (x, y),
                frameon=False,
                transform=ccrs.PlateCarree(),
                box_alignment=(0, 0),  # ‡∏ã‡πâ‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏Å‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
                zorder=20,
            )
            ax.add_artist(ab)

        except Exception as e:
            print(f"‚ùå Failed to add logo: {e}")

    def _add_station_map(self, ax, type_map):
        # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        west, east, south, north = ax.get_extent(ccrs.PlateCarree())

        # ‚úÖ ‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏à‡∏∏‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏≤‡∏Å‡∏≤‡∏® - ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON
        data = self.load_json(self.json_station_world_file)

        # ‚úÖ ‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô JSON
        for station in data:  # ‚úÖ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ó‡∏µ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
            lat = float(station["location"]["latitude"])  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float
            lon = float(station["location"]["longitude"])  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float
            # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
            if west <= lon <= east and south <= lat <= north:
                # ‚úÖ ‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏à‡∏∏‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏ö‡∏ö‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÄ‡∏õ‡∏•‡πà‡∏≤
                ax.scatter(
                    lon,
                    lat,
                    marker="o",  # ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏á‡∏Å‡∏•‡∏°
                    edgecolor="black",  # ‚úÖ ‡∏™‡∏µ‡∏Ç‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á Marker
                    facecolors="none",  # ‚úÖ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
                    s=0.8,  # ‚úÖ ‡πÉ‡∏ä‡πâ s ‡πÅ‡∏ó‡∏ô markersize
                    linewidths=0.05,  # ‚úÖ ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                    alpha=0.5,
                    label="Station",
                )

                # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° label ‡πÅ‡∏™‡∏î‡∏á station_id ‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ö‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏•‡πá‡∏≠‡∏ï
                ax.text(
                    lon + 0.0,  # ‚úÖ ‡∏Ç‡∏¢‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤
                    lat + 0.075,  # ‚úÖ ‡∏Ç‡∏¢‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
                    station["station_id"],  # ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á
                    fontsize=0.5,  # ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πá‡∏Å
                    color="blue",  # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                    ha="center",  # ‚úÖ ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
                    va="bottom",  # ‚úÖ ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
                    transform=ccrs.PlateCarree(),
                    alpha=0.5,
                    fontproperties=prop_bold,
                    zorder=15,  # ‚úÖ ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î
                )

    def plot_surface(self, date, time, limit):
        try:
            self.main_window.textarea.setText("üü° Plot Surface() Called")
            if not self.ax or not self.figure:
                self.main_window.textarea.append("‚ùå Map not initialized")
                return

            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ surface ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            data_synop = self.load_json(self.json_data_surface_file)
            self.main_window.textarea.append(
                f"üìÑ Loaded parsed surface data: {len(data_synop)} entries"
            )

            data_station = self.load_json(self.json_station_world_file)
            self.main_window.textarea.append(
                f"üìÑ Loaded stations: {len(data_station)} entries"
            )

            if not data_synop or not data_station:
                self.main_window.textarea.append("‚ùå Missing data file(s)")
                return self.figure, self.ax

            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• synop ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô
            dates = sorted(
                {r.get("date") for r in data_synop if r.get("date")}, reverse=True
            )

            if len(dates) > 0:
                latest_date = dates[0]
                self.main_window.textarea.append(f"üìÜ Date: {latest_date}")
            else:
                self.main_window.textarea.append("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ß‡∏±‡∏ô")
                return self.figure, self.ax

            stations = []
            for record in data_synop:
                station_info = next(
                    (
                        s
                        for s in data_station
                        if s["station_id"] == record["station_id"]
                    ),
                    None,
                )
                if not station_info:
                    continue

                try:
                    main = record.get("main", {})

                    info_irix = main.get("IrIxhVV", "00000")
                    info_nddff = main.get("Nddff", "00000")
                    info_temp = main.get("1SnTTT", "00000")
                    info_dewp = main.get("2SnTdTdTd", "00000")
                    info_pres = main.get("4PPPP", "00000")
                    info_weather = main.get("7wwW1W2", "00000")
                    info_cloud = main.get("8NhClCmCH", "00000")

                    if info_pres[0:2] != "40":
                        continue

                    ff_raw = self.safe_slice_int(info_nddff, 3, 5)
                    dd = (
                        self.safe_slice_int(info_nddff, 1, 3) * 10 if ff_raw >= 3 else 0
                    )
                    ff = ff_raw if ff_raw >= 3 else 0

                    stations.append(
                        {
                            "station_id": record["station_id"],
                            "lat": float(station_info["location"]["latitude"]),
                            "lon": float(station_info["location"]["longitude"]),
                            "h": info_irix[2:3],
                            "vv": self.safe_slice_int(info_irix, 3, 5),
                            "n": (
                                0
                                if info_nddff[0:1] == "/"
                                else self.safe_slice_int(info_nddff, 0, 1)
                            ),
                            "dd": dd,
                            "ff": ff,
                            "nt": self.safe_slice_int(info_temp, 1, 2),
                            "TTT": self.safe_slice_float(info_temp, 2, 5, scale=0.1),
                            "nd": self.safe_slice_int(info_dewp, 1, 2),
                            "DDD": self.safe_slice_float(info_dewp, 2, 5, scale=0.1),
                            "pppp": self.safe_slice_int(info_pres, 1, 5),
                            "ww": self.safe_slice_int(info_weather, 1, 3),
                            "Nh": self.safe_slice_int(info_cloud, 1, 2),
                            "Cl": self.safe_slice_int(info_cloud, 2, 3),
                            "Cm": self.safe_slice_int(info_cloud, 3, 4),
                            "Ch": self.safe_slice_int(info_cloud, 4, 5),
                        }
                    )
                except Exception as e:
                    self.main_window.textarea.append(
                        f"‚ö†Ô∏è Parse error for station {record['station_id']}: {e}"
                    )
                    continue

            # ‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
            self.write_json(self.json_data_plot_surface_file, stations)
            self.main_window.textarea.append(f"‚úÖ Parsed {len(stations)} stations")

            if not stations:
                self.main_window.textarea.append("‚ùå No stations to plot")
                return self.figure, self.ax

            # ‚ñ∂Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î
            df = pd.DataFrame(stations)

            transformer = Transformer.from_crs("EPSG:4326", "EPSG:3857", always_xy=True)
            df["x_meter"], df["y_meter"] = transformer.transform(
                df["lon"].values, df["lat"].values
            )

            # ‚ñ∂Ô∏è ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏à‡∏∏‡∏î
            point_locs = xr.DataArray(
                np.stack([df["x_meter"], df["y_meter"]], axis=-1),
                dims=("points", "space"),
                attrs={"crs": ccrs.PlateCarree()},
            )
            mask = reduce_point_density(
                point_locs * units.meter, 150000.0 * units.meter
            )
            df = df[mask]

            # ‚ñ∂Ô∏è ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
            df = df[
                (df["lon"] >= 46.5)
                & (df["lon"] <= 159.5)
                & (df["lat"] >= -30.5)
                & (df["lat"] <= 48.8)
            ]

            if df.empty:
                self.main_window.textarea.append("‚ùå No stations to plot")
                return self.figure, self.ax

            try:
                self.main_window.textarea.append("‚ñ∂Ô∏è Plot Surface ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏î‡πâ‡∏ß‡∏¢ MetPy")
                df_north = df[df["lat"] >= 0]
                df_south = df[df["lat"] < 0]

                # ‚ñ∂Ô∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô plot ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏•‡∏° (‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡πÑ‡∏î‡πâ)
                def plot_station_surface(plot_obj, df_part):
                    df_part.loc[df_part["nt"] == 1, "TTT"] *= -1
                    df_part.loc[df_part["nd"] == 1, "DDD"] *= -1
                    plot_obj.plot_parameter(
                        "NW",
                        df_part["TTT"],
                        formatter=lambda v: f"{v:.1f}",
                        fontproperties=prop_bold,
                        fontsize=2,
                        zorder=10,
                    )
                    plot_obj.plot_parameter(
                        "SW",
                        df_part["DDD"],
                        formatter=lambda v: f"{v:.1f}",
                        fontproperties=prop_bold,
                        fontsize=2,
                        zorder=10,
                    )
                    plot_obj.plot_parameter(
                        "W2",
                        df_part["vv"],
                        fontproperties=prop_bold,
                        fontsize=2,
                        zorder=10,
                    )
                    plot_obj.plot_parameter(
                        "SE",
                        df_part["Nh"].where(df_part["Nh"] != 0),
                        fontproperties=prop_bold,
                        fontsize=2,
                        zorder=10,
                    )
                    plot_obj.plot_parameter(
                        (1.3, 1),
                        df_part["pppp"],
                        formatter=lambda v: f"{int(v):03d}",
                        fontproperties=prop_bold,
                        fontsize=2,
                        color="red",
                        zorder=10,
                    )

                    # ‚ñ∂Ô∏è Symbols
                    def clip_symbol(data, min_val, max_val):
                        return (
                            pd.Series(
                                np.where(
                                    (data >= min_val) & (data <= max_val), data, np.nan
                                )
                            )
                            .dropna()
                            .astype(int)
                        )

                    plot_obj.plot_symbol(
                        "W",
                        clip_symbol(df_part["ww"].astype(float), 0, 99),
                        current_weather,
                        fontproperties=prop_bold,
                        fontsize=2,
                        zorder=10,
                        # color="red",
                    )
                    plot_obj.plot_symbol(
                        "C",
                        clip_symbol(df_part["n"].astype(float), 0, 9),
                        sky_cover,
                        fontproperties=prop_bold,
                        fontsize=2.0,
                        zorder=10,
                    )
                    plot_obj.plot_symbol(
                        "S",
                        clip_symbol(df_part["Cl"].astype(float), 0, 9),
                        low_clouds,
                        fontproperties=prop_bold,
                        fontsize=2,
                        zorder=10,
                    )
                    plot_obj.plot_symbol(
                        "N",
                        clip_symbol(df_part["Cm"].astype(float), 0, 9),
                        mid_clouds,
                        fontproperties=prop_bold,
                        fontsize=2,
                    )
                    plot_obj.plot_symbol(
                        "N2",
                        clip_symbol(df_part["Ch"].astype(float), 0, 9),
                        high_clouds,
                        fontproperties=prop_bold,
                        fontsize=2,
                        zorder=10,
                    )

                    # ‚ñ∂Ô∏è ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
                    plot_obj.plot_text(
                        (0, 1.5),
                        df_part["station_id"],
                        fontproperties=prop_bold,
                        fontsize=2,
                        color="blue",
                        zorder=5,
                        alpha=0.5,
                    )

                # ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö wind barb (‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏ã‡∏µ‡∏Å‡πÇ‡∏•‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡πÉ‡∏ï‡πâ)
                barb_defaults = {"sizes": {"emptybarb": 0.2}}

                # ‚ñ∂Ô∏è ‡∏ã‡∏µ‡∏Å‡πÇ‡∏•‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
                if not df_north.empty:
                    u_n = -df_north["ff"] * np.sin(np.radians(df_north["dd"]))
                    v_n = -df_north["ff"] * np.cos(np.radians(df_north["dd"]))

                    plot_n = StationPlot(
                        self.ax,
                        df_north["lon"].values,
                        df_north["lat"].values,
                        transform=ccrs.PlateCarree(),
                        fontsize=1.4,
                        spacing=1.5,
                        zorder=5,
                    )
                    plot_station_surface(plot_n, df_north)

                    plot_n.plot_barb(
                        np.nan_to_num(u_n),
                        np.nan_to_num(v_n),
                        flip_barb=False,
                        linewidth=0.1,
                        length=2.5,  # ‚úÖ ‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ã‡∏µ‡∏Å‡πÇ‡∏•‡∏Å‡πÉ‡∏ï‡πâ
                        zorder=10,
                        sizes=barb_defaults["sizes"],  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° sizes ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                    )

                # ‚ñ∂Ô∏è ‡∏ã‡∏µ‡∏Å‡πÇ‡∏•‡∏Å‡πÉ‡∏ï‡πâ
                if not df_south.empty:
                    u_s = -df_south["ff"] * np.sin(np.radians(df_south["dd"]))
                    v_s = -df_south["ff"] * np.cos(np.radians(df_south["dd"]))

                    plot_s = StationPlot(
                        self.ax,
                        df_south["lon"].values,
                        df_south["lat"].values,
                        transform=ccrs.PlateCarree(),
                        fontsize=1.4,
                        spacing=1.5,
                        zorder=5,
                    )
                    plot_station_surface(plot_s, df_south)

                    plot_s.plot_barb(
                        np.nan_to_num(u_s),
                        np.nan_to_num(v_s),
                        flip_barb=True,
                        linewidth=0.1,
                        length=2.5,
                        zorder=10,
                        sizes=barb_defaults["sizes"],  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                    )

                # ‚ñ∂Ô∏è Label
                date = re.sub("-", " ", date)
                west, east, south, north = self.ax.get_extent(ccrs.PlateCarree())
                x_text = west + (east - west) * 0.16125
                y_text = south + (north - south) * 0.1485
                self.ax.text(
                    x_text,
                    y_text,
                    f"{date}".upper(),
                    fontsize=10,
                    fontweight="bold",
                    color="blue",
                    ha="center",
                    va="center",
                    transform=ccrs.PlateCarree(),
                    zorder=30,
                )

                x_text = west + (east - west) * 0.160
                y_text = south + (north - south) * 0.140
                self.ax.text(
                    x_text,
                    y_text - 1.0,
                    f"{time}",
                    fontsize=10,
                    fontweight="bold",
                    color="red",
                    ha="center",
                    va="center",
                    transform=ccrs.PlateCarree(),
                    zorder=30,
                )

                x_text = west + (east - west) * 0.160
                y_text = south + (north - south) * 0.110
                self.ax.text(
                    x_text,
                    y_text,
                    "‡∏≠‡∏ï.‡∏ó‡∏≠. 1001",
                    fontsize=8,
                    fontproperties=prop_bold,
                    color="black",
                    ha="center",
                    va="center",
                    transform=ccrs.PlateCarree(),
                    zorder=30,
                )

                self.main_window.textarea.append("‚úÖ Plot Surface ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏î‡πâ‡∏ß‡∏¢ MetPy")
            except Exception as e:
                self.main_window.textarea.append(f"‚ùå Plot Surface Error: {e}")
        except Exception as e:
            self.main_window.textarea.append(
                f"‚ùå Unexpected error in Plot Surface: {e}"
            )

        return self.figure, self.ax

    def plot_pressure(self, date, time, limit):
        try:
            self.main_window.textarea.setText("üü° Plot Pressure() Called")
            if not self.ax or not self.figure:
                self.main_window.textarea.append("‚ùå Map not initialized")
                return

            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ pressure ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            data_synop = self.load_json(self.json_data_pressure_file)
            self.main_window.textarea.append(
                f"üìÑ Loaded parsed pressure data: {len(data_synop)} entries"
            )

            data_station = self.load_json(self.json_station_world_file)
            self.main_window.textarea.append(
                f"üìÑ Loaded stations: {len(data_station)} entries"
            )

            if not data_synop or not data_station:
                self.main_window.textarea.append("‚ùå Missing data file(s)")
                return self.figure, self.ax

            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• synop ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô
            all_dates = sorted(
                {r.get("date") for r in data_synop if r.get("date")}, reverse=True
            )

            if len(all_dates) < 2:
                self.main_window.textarea.append(
                    "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ß‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö"
                )
                return self.figure, self.ax

            latest_date = all_dates[0]
            previous_date = all_dates[1]
            self.main_window.textarea.append(
                f"üìÜ Latest: {latest_date}, Previous: {previous_date}"
            )

            data_latest = [r for r in data_synop if r.get("date") == latest_date]
            data_previous = [r for r in data_synop if r.get("date") == previous_date]
            data_previous_dict = {r["station_id"]: r for r in data_previous}

            stations = []
            for record_today in data_latest:
                station_id = record_today.get("station_id")
                record_yesterday = data_previous_dict.get(station_id)
                if not record_yesterday:
                    continue

                station_info = next(
                    (s for s in data_station if s["station_id"] == station_id), None
                )
                if not station_info:
                    continue

                try:
                    pres_today = record_today.get("main", {}).get("4PPPP", "")
                    pres_yesterday = record_yesterday.get("main", {}).get("4PPPP", "")

                    if not (
                        pres_today.startswith("40") and pres_yesterday.startswith("40")
                    ):
                        continue

                    if len(pres_today) < 5 or len(pres_yesterday) < 5:
                        continue

                    def parse_pressure(p_str):
                        sub = p_str[2:5].replace("/", "0")
                        return 1000.0 + (int(sub) / 10.0) if sub.isdigit() else None

                    p_today = parse_pressure(pres_today)
                    p_yesterday = parse_pressure(pres_yesterday)

                    if p_today is None or p_yesterday is None:
                        continue

                    delta_p = round(p_today - p_yesterday, 1)

                    stations.append(
                        {
                            "station_id": station_id,
                            "lat": float(station_info["location"]["latitude"]),
                            "lon": float(station_info["location"]["longitude"]),
                            "pppp": delta_p,
                        }
                    )
                except Exception as e:
                    self.main_window.textarea.append(
                        f"‚ö†Ô∏è Parse error for station {station_id}: {e}"
                    )
                    continue

            self.write_json(self.json_data_plot_pressure_file, stations)
            self.main_window.textarea.append(f"‚úÖ Parsed {len(stations)} stations")

            if not stations:
                self.main_window.textarea.append("‚ùå No stations to plot")
                return self.figure, self.ax

            # ‚ñ∂Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î
            df = pd.DataFrame(stations)
            transformer = Transformer.from_crs("EPSG:4326", "EPSG:3857", always_xy=True)
            df["x_meter"], df["y_meter"] = transformer.transform(
                df["lon"].values, df["lat"].values
            )

            # ‚ñ∂Ô∏è ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏à‡∏∏‡∏î
            point_locs = xr.DataArray(
                np.stack([df["x_meter"], df["y_meter"]], axis=-1),
                dims=("points", "space"),
                attrs={"crs": ccrs.PlateCarree()},
            )
            mask = reduce_point_density(point_locs * units.meter, 50000.0 * units.meter)
            df = df[mask]

            # ‚ñ∂Ô∏è ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
            df = df[
                (df["lon"] >= 46.5)
                & (df["lon"] <= 159.5)
                & (df["lat"] >= -30.5)
                & (df["lat"] <= 48.8)
            ]

            try:
                self.main_window.textarea.append("‚ñ∂Ô∏è Plot Pressure ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏î‡πâ‡∏ß‡∏¢ MetPy")
                for i, row in df.iterrows():
                    value = row["pppp"]
                    color = (
                        "green"
                        if value == 0 or pd.isna(value)
                        else "red" if value < 0 else "blue"
                    )

                    text = f"{abs(value):.1f}" if pd.notna(value) else ""

                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á StationPlot ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ
                    single_plot = StationPlot(
                        self.ax,
                        [row["lon"]],
                        [row["lat"]],
                        transform=ccrs.PlateCarree(),
                        fontsize=5,
                        spacing=5.5,
                        zorder=10,
                    )

                    single_plot.plot_text(
                        "C",  # ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô (1, -1)
                        [text],
                        color=color,
                        fontweight="bold",
                        fontproperties=prop_bold,
                        fontsize=3,
                        zorder=10,
                    )

                # ‚ñ∂Ô∏è Label
                date = re.sub("-", " ", date)
                west, east, south, north = self.ax.get_extent(ccrs.PlateCarree())
                x_text = west + (east - west) * 0.16125
                y_text = south + (north - south) * 0.1485
                self.ax.text(
                    x_text,
                    y_text,
                    f"{date}".upper(),
                    fontsize=10,
                    fontweight="bold",
                    color="blue",
                    ha="center",
                    va="center",
                    transform=ccrs.PlateCarree(),
                    zorder=30,
                )

                x_text = west + (east - west) * 0.160
                y_text = south + (north - south) * 0.140
                self.ax.text(
                    x_text,
                    y_text - 1.0,
                    f"{time}",
                    fontsize=10,
                    fontweight="bold",
                    color="red",
                    ha="center",
                    va="center",
                    transform=ccrs.PlateCarree(),
                    zorder=30,
                )

                west, east, south, north = self.ax.get_extent(ccrs.PlateCarree())
                x_text = west + (east - west) * 0.160
                y_text = south + (north - south) * 0.110
                self.ax.text(
                    x_text,
                    y_text,
                    "‡∏≠‡∏ï.‡∏ó‡∏≠. 1010",
                    fontsize=8,
                    fontproperties=prop_bold,
                    color="black",
                    ha="center",
                    va="center",
                    transform=ccrs.PlateCarree(),
                    zorder=30,
                )

                self.main_window.textarea.append("‚úÖ Plot Pressure ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏î‡πâ‡∏ß‡∏¢ MetPy")
            except Exception as e:
                self.main_window.textarea.append(f"‚ùå Plot Pressure Error: {e}")

        except Exception as e:
            self.main_window.textarea.append(
                f"‚ùå Unexpected error in Plot Pressure: {e}"
            )

        return self.figure, self.ax

    def plot_detail(self, date, time, limit):
        try:
            self.main_window.textarea.setText("üü° Plot Detail() Called")
            if not self.ax or not self.figure:
                self.main_window.textarea.append("‚ùå Map not initialized")
                return

            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ detail ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            data_synop = self.load_json(self.json_data_detail_file)
            self.main_window.textarea.append(
                f"üìÑ Loaded parsed detail data: {len(data_synop)} entries"
            )

            data_station = self.load_json(self.json_station_world_file)
            self.main_window.textarea.append(
                f"üìÑ Loaded stations: {len(data_station)} entries"
            )

            if not data_synop or not data_station:
                self.main_window.textarea.append("‚ùå Missing data file(s)")
                return self.figure, self.ax

            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• synop ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô
            dates = sorted(
                {r.get("date") for r in data_synop if r.get("date")}, reverse=True
            )

            if len(dates) > 0:
                latest_date = dates[0]
                self.main_window.textarea.append(f"üìÜ Date: {latest_date}")
            else:
                self.main_window.textarea.append("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ß‡∏±‡∏ô")
                return self.figure, self.ax

            stations = []
            for record in data_synop:
                station_info = next(
                    (
                        s
                        for s in data_station
                        if s["station_id"] == record["station_id"]
                    ),
                    None,
                )
                if not station_info:
                    continue

                try:
                    main = record.get("main", {})

                    info_irix = main.get("IrIxhVV", "00000")
                    info_nddff = main.get("Nddff", "00000")
                    info_temp = main.get("1SnTTT", "00000")
                    info_dewp = main.get("2SnTdTdTd", "00000")
                    info_pres = main.get("4PPPP", "00000")
                    info_weather = main.get("7wwW1W2", "00000")
                    info_cloud = main.get("8NhClCmCH", "00000")

                    if info_pres[0:2] != "40":
                        continue

                    ff_raw = self.safe_slice_int(info_nddff, 3, 5)
                    dd = (
                        self.safe_slice_int(info_nddff, 1, 3) * 10 if ff_raw >= 3 else 0
                    )
                    ff = ff_raw if ff_raw >= 3 else 0

                    stations.append(
                        {
                            "station_id": record["station_id"],
                            "lat": float(station_info["location"]["latitude"]),
                            "lon": float(station_info["location"]["longitude"]),
                            "h": info_irix[2:3],
                            "vv": self.safe_slice_int(info_irix, 3, 5),
                            "n": (
                                0
                                if info_nddff[0:1] == "/"
                                else self.safe_slice_int(info_nddff, 0, 1)
                            ),
                            "dd": dd,
                            "ff": ff,
                            "nt": self.safe_slice_int(info_temp, 1, 2),
                            "TTT": self.safe_slice_float(info_temp, 2, 5, scale=0.1),
                            "nd": self.safe_slice_int(info_dewp, 1, 2),
                            "DDD": self.safe_slice_float(info_dewp, 2, 5, scale=0.1),
                            "pppp": self.safe_slice_int(info_pres, 1, 5),
                            "ww": self.safe_slice_int(info_weather, 1, 3),
                            "Nh": self.safe_slice_int(info_cloud, 1, 2),
                            "Cl": self.safe_slice_int(info_cloud, 2, 3),
                            "Cm": self.safe_slice_int(info_cloud, 3, 4),
                            "Ch": self.safe_slice_int(info_cloud, 4, 5),
                        }
                    )
                except Exception as e:
                    self.main_window.textarea.append(
                        f"‚ö†Ô∏è Parse error for station {record['station_id']}: {e}"
                    )
                    continue

            # ‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
            self.write_json(self.json_data_plot_detail_file, stations)
            self.main_window.textarea.append(f"‚úÖ Parsed {len(stations)} stations")

            if not stations:
                self.main_window.textarea.append("‚ùå No stations to plot")
                return self.figure, self.ax

            # ‚ñ∂Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î
            df = pd.DataFrame(stations)

            transformer = Transformer.from_crs("EPSG:4326", "EPSG:3857", always_xy=True)
            df["x_meter"], df["y_meter"] = transformer.transform(
                df["lon"].values, df["lat"].values
            )

            # ‚ñ∂Ô∏è ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏à‡∏∏‡∏î
            point_locs = xr.DataArray(
                np.stack([df["x_meter"], df["y_meter"]], axis=-1),
                dims=("points", "space"),
                attrs={"crs": ccrs.PlateCarree()},
            )
            mask = reduce_point_density(point_locs * units.meter, 80000.0 * units.meter)
            df = df[mask]

            # ‚ñ∂Ô∏è ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
            df = df[
                (df["lon"] >= 93)
                & (df["lon"] <= 111.2)
                & (df["lat"] >= -1.5)
                & (df["lat"] <= 24.5)
            ]

            if df.empty:
                self.main_window.textarea.append("‚ùå No stations to plot")
                return self.figure, self.ax

            try:
                self.main_window.textarea.append("‚ñ∂Ô∏è Plot Detail ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏î‡πâ‡∏ß‡∏¢ MetPy")
                df_north = df[df["lat"] >= 0]
                df_south = df[df["lat"] < 0]

                # ‚ñ∂Ô∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô plot ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏•‡∏° (‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡πÑ‡∏î‡πâ)
                def plot_station_surface(plot_obj, df_part):
                    df_part.loc[df_part["nt"] == 1, "TTT"] *= -1
                    df_part.loc[df_part["nd"] == 1, "DDD"] *= -1
                    plot_obj.plot_parameter(
                        "NW",
                        df_part["TTT"],
                        formatter=lambda v: f"{v:.1f}",
                        fontproperties=prop_bold,
                        fontsize=1,
                        zorder=30,
                    )
                    plot_obj.plot_parameter(
                        "SW",
                        df_part["DDD"],
                        formatter=lambda v: f"{v:.1f}",
                        fontproperties=prop_bold,
                        fontsize=1,
                        zorder=30,
                    )
                    plot_obj.plot_parameter(
                        "W2",
                        df_part["vv"],
                        fontproperties=prop_bold,
                        fontsize=1,
                        zorder=30,
                    )
                    plot_obj.plot_parameter(
                        "SE",
                        df_part["Nh"].where(df_part["Nh"] != 0),
                        fontproperties=prop_bold,
                        fontsize=1,
                        zorder=30,
                    )
                    plot_obj.plot_parameter(
                        (1.5, 1),
                        df_part["pppp"],
                        formatter=lambda v: f"{int(v):03d}",
                        fontproperties=prop_bold,
                        fontsize=2,
                        color="red",
                        zorder=30,
                    )

                    # ‚ñ∂Ô∏è Symbols
                    def clip_symbol(data, min_val, max_val):
                        return (
                            pd.Series(
                                np.where(
                                    (data >= min_val) & (data <= max_val), data, np.nan
                                )
                            )
                            .dropna()
                            .astype(int)
                        )

                    plot_obj.plot_symbol(
                        "W",
                        clip_symbol(df_part["ww"].astype(float), 0, 99),
                        current_weather,
                        fontproperties=prop_bold,
                        fontsize=1,
                        zorder=30,
                    )
                    plot_obj.plot_symbol(
                        "C",
                        clip_symbol(df_part["n"].astype(float), 0, 9),
                        sky_cover,
                        fontproperties=prop_bold,
                        fontsize=1.0,
                        zorder=30,
                    )
                    plot_obj.plot_symbol(
                        "S",
                        clip_symbol(df_part["Cl"].astype(float), 0, 9),
                        low_clouds,
                        fontproperties=prop_bold,
                        fontsize=1,
                        zorder=30,
                    )
                    plot_obj.plot_symbol(
                        "N",
                        clip_symbol(df_part["Cm"].astype(float), 0, 9),
                        mid_clouds,
                        fontproperties=prop_bold,
                        fontsize=1,
                    )
                    plot_obj.plot_symbol(
                        "N2",
                        clip_symbol(df_part["Ch"].astype(float), 0, 9),
                        high_clouds,
                        fontproperties=prop_bold,
                        fontsize=1,
                        zorder=30,
                    )

                # ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö wind barb (‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏ã‡∏µ‡∏Å‡πÇ‡∏•‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡πÉ‡∏ï‡πâ)
                barb_defaults = {"sizes": {"emptybarb": 0.2}}

                # ‚ñ∂Ô∏è ‡∏ã‡∏µ‡∏Å‡πÇ‡∏•‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
                if not df_north.empty:
                    u_n = -df_north["ff"] * np.sin(np.radians(df_north["dd"]))
                    v_n = -df_north["ff"] * np.cos(np.radians(df_north["dd"]))

                    plot_n = StationPlot(
                        self.ax,
                        df_north["lon"].values,
                        df_north["lat"].values,
                        transform=ccrs.PlateCarree(),
                        fontsize=0.7,
                        spacing=1.0,
                        zorder=30,
                    )
                    plot_station_surface(plot_n, df_north)

                    plot_n.plot_barb(
                        np.nan_to_num(u_n),
                        np.nan_to_num(v_n),
                        flip_barb=False,
                        linewidth=0.1,
                        length=2.5,  # ‚úÖ ‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ã‡∏µ‡∏Å‡πÇ‡∏•‡∏Å‡πÉ‡∏ï‡πâ
                        zorder=30,
                        sizes=barb_defaults["sizes"],  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° sizes ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                    )

                # ‚ñ∂Ô∏è ‡∏ã‡∏µ‡∏Å‡πÇ‡∏•‡∏Å‡πÉ‡∏ï‡πâ
                if not df_south.empty:
                    u_s = -df_south["ff"] * np.sin(np.radians(df_south["dd"]))
                    v_s = -df_south["ff"] * np.cos(np.radians(df_south["dd"]))

                    plot_s = StationPlot(
                        self.ax,
                        df_south["lon"].values,
                        df_south["lat"].values,
                        transform=ccrs.PlateCarree(),
                        fontsize=0.7,
                        spacing=1.0,
                        zorder=30,
                    )
                    plot_station_surface(plot_s, df_south)

                    plot_s.plot_barb(
                        np.nan_to_num(u_s),
                        np.nan_to_num(v_s),
                        flip_barb=True,
                        linewidth=0.1,
                        length=2.5,
                        zorder=30,
                        sizes=barb_defaults["sizes"],  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                    )

                # ‚ñ∂Ô∏è Label
                date = re.sub("-", " ", date)
                west, east, south, north = self.ax.get_extent(ccrs.PlateCarree())
                x_text = west + (east - west) * 0.180
                y_text = south + (north - south) * 0.130
                self.ax.text(
                    x_text,
                    y_text,
                    f"{date}".upper(),
                    fontsize=5,
                    fontweight="bold",
                    color="blue",
                    ha="center",
                    va="center",
                    transform=ccrs.PlateCarree(),
                    zorder=30,
                )

                west, east, south, north = self.ax.get_extent(ccrs.PlateCarree())
                x_text = west + (east - west) * 0.180
                y_text = south + (north - south) * 0.155
                self.ax.text(
                    x_text,
                    y_text - 1.0,
                    f"{time}",
                    fontsize=5,
                    fontweight="bold",
                    color="red",
                    ha="center",
                    va="center",
                    transform=ccrs.PlateCarree(),
                    zorder=30,
                )

                west, east, south, north = self.ax.get_extent(ccrs.PlateCarree())
                x_text = west + (east - west) * 0.180
                y_text = south + (north - south) * 0.107
                self.ax.text(
                    x_text,
                    y_text,
                    "‡∏≠‡∏ï.‡∏ó‡∏≠. 1003",
                    fontsize=5,
                    fontproperties=prop_bold,
                    color="black",
                    ha="center",
                    va="center",
                    transform=ccrs.PlateCarree(),
                    zorder=30,
                )

                self.main_window.textarea.append("‚úÖ Plot Detail ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏î‡πâ‡∏ß‡∏¢ MetPy")
            except Exception as e:
                self.main_window.textarea.append(f"‚ùå Plot Detail Error: {e}")
        except Exception as e:
            self.main_window.textarea.append(f"‚ùå Unexpected error in Plot Detail: {e}")

        return self.figure, self.ax

    def plot_upperwind1(self, date: str, time: str, limit: int, index_pressure: int):
        try:
            self.main_window.textarea.setText("üü° Plot UpperWind1() Called")

            if not self.ax or not self.figure:
                self.main_window.textarea.append("‚ùå Map not initialized")
                return

            # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            levels_target = [850, 500, 300, 700, 400, 200]
            level_labels = [
                "850 hPa",
                "500 hPa",
                "300 hPa",
                "700 hPa",
                "400 hPa",
                "200 hPa",
            ]

            # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ index_pressure ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            if index_pressure not in levels_target:
                self.main_window.textarea.append(
                    f"‚ùå index_pressure {index_pressure} ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: {levels_target}"
                )
                return self.figure, self.ax  # üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

            # ‚úÖ ‡∏´‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á index_pressure
            pressure_index = levels_target.index(index_pressure)
            pressure_label = level_labels[pressure_index]

            # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON
            data_all = self.load_json(self.json_data_upperwind_file)
            data_station = self.load_json(self.json_station_world_file)

            if not data_all or not data_station:
                self.main_window.textarea.append("‚ùå Missing data file(s)")
                return self.figure, self.ax

            # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
            try:
                date_obj = datetime.strptime(date, "%d-%b-%Y")
                json_date = date_obj.strftime("%Y-%m-%d")
            except ValueError:
                self.main_window.textarea.append("‚ùå Invalid date format")
                return self.figure, self.ax

            if isinstance(data_all, dict) and json_date in data_all:
                data_synop = data_all[json_date]
                self.main_window.textarea.append(f"üìÜ Date: {json_date}")
            else:
                self.main_window.textarea.append("‚ùå No data entries available in JSON")
                return self.figure, self.ax

            # ‚úÖ ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
            station_dict = {s["station_id"]: s for s in data_station}

            stations = []
            for station_id, record in data_synop.items():
                if station_id not in station_dict:
                    continue

                for entry in record.get("TTAA", []) + record.get("PPAA", []):
                    pressure = entry.get("hPa./ft.")
                    if pressure != index_pressure:  # ‚úÖ ‡πÉ‡∏ä‡πâ index_pressure ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                        continue

                    wind_dir = entry.get("wind_dir")
                    wind_speed = entry.get("wind_speed")
                    if wind_dir is None or wind_speed is None:
                        continue

                    station_info = station_dict[station_id]
                    stations.append(
                        {
                            "station_id": station_id,
                            "lat": float(station_info["location"]["latitude"]),
                            "lon": float(station_info["location"]["longitude"]),
                            "pressure": pressure,
                            "dd": wind_dir,
                            "ff": wind_speed,
                        }
                    )

            # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô DataFrame
            df = pd.DataFrame(stations)

            # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "pressure" ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            pressure_order = pd.CategoricalDtype(levels_target, ordered=True)
            df["pressure"] = df["pressure"].astype(pressure_order)

            # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            df = df.sort_values(by="pressure")

            # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            transformer = Transformer.from_crs("EPSG:4326", "EPSG:3857", always_xy=True)
            df["x_meter"], df["y_meter"] = transformer.transform(
                df["lon"].values, df["lat"].values
            )

            # ‚úÖ ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î
            point_locs = xr.DataArray(
                np.stack([df["x_meter"], df["y_meter"]], axis=-1),
                dims=("points", "space"),
                attrs={"crs": ccrs.PlateCarree()},
            )
            mask = reduce_point_density(point_locs * units.meter, 5000.0 * units.meter)
            df = df[mask]

            # ‚ñ∂Ô∏è ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
            df = df[
                (df["lon"] >= 60.0)
                & (df["lon"] <= 145.0)
                & (df["lat"] >= -15.0)
                & (df["lat"] <= 45.0)
            ]

            if df.empty:
                self.main_window.textarea.append("‚ùå No stations to plot")
                return self.figure, self.ax

            # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏•‡∏°
            angle_rad = np.radians(df["dd"])
            arrow_length = 0.5
            u_fixed = -np.sin(angle_rad) * arrow_length
            v_fixed = -np.cos(angle_rad) * arrow_length

            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏´‡∏±‡∏™‡∏•‡∏°‡πÅ‡∏ö‡∏ö 5 ‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏ä‡πà‡∏ô 24515
            df["wnd"] = df.apply(
                lambda row: f"{int(row['dd']):03d}{int(row['ff']):02d}", axis=1
            )

            try:
                self.main_window.textarea.append(
                    f"‚ñ∂Ô∏è Plot UpperWind - {pressure_label} ‡∏î‡πâ‡∏ß‡∏¢ MetPy"
                )
                plot = StationPlot(
                    self.ax,
                    df["lon"].values,
                    df["lat"].values,
                    clip_on=True,
                    transform=ccrs.PlateCarree(),
                    fontsize=1.5,
                    spacing=0.5,
                    zorder=10,
                )

                # ‚ñ∂Ô∏è ‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏•‡∏°
                plot.plot_arrow(
                    np.nan_to_num(u_fixed.values),
                    np.nan_to_num(v_fixed.values),
                    scale=1.0,
                    scale_units="xy",
                    width=0.0005,
                    pivot="tail",
                    color="red",
                    zorder=30,
                )

                # ‚ñ∂Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏•‡∏°
                plot.plot_text(
                    "S",
                    df["wnd"],
                    fontproperties=prop_bold,
                    fontsize=1.5,
                    color="red",
                    zorder=30,
                )

                # ‚ñ∂Ô∏è ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
                plot.plot_text(
                    "NW",
                    df["station_id"],
                    fontproperties=prop_bold,
                    fontsize=0.5,
                    color="blue",
                    zorder=10,
                )

                self.main_window.textarea.append(
                    f"‚úÖ Plot UpperWind - {pressure_label} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
                )

            except Exception as e:
                self.main_window.textarea.append(f"‚ùå Plot UpperWind - 1 Error: {e}")

        except Exception as e:
            self.main_window.textarea.append(f"‚ùå Error in plot_upperwind1: {e}")

        return self.figure, self.ax

    def plot_upperwind2(self, date: str, time: str, limit: int):
        try:
            self.main_window.textarea.setText("üü° Plot UpperWind2() Called")

            if not self.ax or not self.figure:
                self.main_window.textarea.append("‚ùå Map not initialized")
                return

            # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
            try:
                date_obj = datetime.strptime(date, "%d-%b-%Y")  # "26-Mar-2025"
                json_date = date_obj.strftime("%Y-%m-%d")  # "2025-03-26"
            except ValueError:
                self.main_window.textarea.append("‚ùå Invalid date format")
                return self.figure, self.ax

            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ upperwind ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            data_all = self.load_json(self.json_data_upperwind_file)
            self.main_window.textarea.append(
                f"üìÑ Loaded parsed upperwind data: {len(data_all)} entries"
            )

            data_station = self.load_json(self.json_station_world_file)
            self.main_window.textarea.append(
                f"üìÑ Loaded stations: {len(data_station)} entries"
            )

            if not data_all or not data_station:
                self.main_window.textarea.append("‚ùå Missing data file(s)")
                return self.figure, self.ax

            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• synop ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô
            if isinstance(data_all, dict):
                if json_date in data_all:
                    data_synop = data_all[json_date]
                    self.main_window.textarea.append(f"üìÜ Date: {json_date}")
                else:
                    available_dates = sorted(data_all.keys(), reverse=True)
                    if available_dates:
                        latest_date = available_dates[0]
                        data_synop = data_all[latest_date]
                        self.main_window.textarea.append(
                            f"‚ö†Ô∏è Using latest available data: {latest_date}"
                        )
                    else:
                        self.main_window.textarea.append(
                            "‚ùå No data entries available in JSON"
                        )
                        return self.figure, self.ax
            else:
                self.main_window.textarea.append(
                    "‚ùå JSON structure is not a dictionary"
                )
                return self.figure, self.ax

            station_dict = {s["station_id"]: s for s in data_station}
            levels_target = [2000, 5000, 7000, 10000, 15000, 20000]

            stations = []
            for station_id, record in data_synop.items():
                if station_id not in station_dict:
                    continue

                for entry in record.get("PPBB", []):
                    pressure = entry.get("hPa./ft.")
                    if pressure not in levels_target:
                        continue

                    wind_dir = entry.get("wind_dir")
                    wind_speed = entry.get("wind_speed")
                    if wind_dir is None or wind_speed is None:
                        continue

                    if not (0 <= wind_dir <= 360):
                        self.main_window.textarea.append(
                            f"‚ö†Ô∏è Invalid wind_dir: {wind_dir} at {station_id}"
                        )
                        continue

                    if wind_speed == 0:
                        self.main_window.textarea.append(
                            f"‚ÑπÔ∏è Calm wind at {station_id}, skipping"
                        )
                        continue

                    station_info = station_dict[station_id]
                    stations.append(
                        {
                            "station_id": station_id,
                            "lat": float(station_info["location"]["latitude"]),
                            "lon": float(station_info["location"]["longitude"]),
                            "dd": wind_dir,
                            "ff": wind_speed,
                        }
                    )

            # ‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
            self.write_json(self.json_data_plot_upperwind2_file, stations)
            self.main_window.textarea.append(f"‚úÖ Parsed {len(stations)} stations")

            if not stations:
                self.main_window.textarea.append("‚ùå No valid station data to plot")
                return self.figure, self.ax

            # ‚ñ∂Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î
            df = pd.DataFrame(stations)

            # Coordinate transformation
            transformer = Transformer.from_crs("EPSG:4326", "EPSG:3857", always_xy=True)
            df["x_meter"], df["y_meter"] = transformer.transform(
                df["lon"].values, df["lat"].values
            )

            # ‚ñ∂Ô∏è ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏à‡∏∏‡∏î
            point_locs = xr.DataArray(
                np.stack([df["x_meter"], df["y_meter"]], axis=-1),
                dims=("points", "space"),
                attrs={"crs": ccrs.PlateCarree()},
            )
            mask = reduce_point_density(point_locs * units.meter, 10000.0 * units.meter)
            df = df[mask]

            # ‚ñ∂Ô∏è ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
            df = df[
                (df["lon"] >= 85.0)
                & (df["lon"] <= 125.0)
                & (df["lat"] >= -5.0)
                & (df["lat"] <= 25.0)
            ]

            if df.empty:
                self.main_window.textarea.append("‚ùå No stations to plot")
                return self.figure, self.ax

            # Convert direction and speed to vector
            angle_rad = np.radians(df["dd"])
            arrow_length = 0.5
            u_fixed = -np.sin(angle_rad) * arrow_length
            v_fixed = -np.cos(angle_rad) * arrow_length

            # ‚ñ∂Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏´‡∏±‡∏™‡∏•‡∏°‡πÅ‡∏ö‡∏ö 5 ‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏ä‡πà‡∏ô 24515
            df["wnd"] = df.apply(
                lambda row: f"{int(row['dd']):03d}{int(row['ff']):02d}", axis=1
            )

            try:
                self.main_window.textarea.append("‚ñ∂Ô∏è Plot UpperWind - 2 ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏î‡πâ‡∏ß‡∏¢ MetPy")
                plot = StationPlot(
                    self.ax,
                    df["lon"].values,
                    df["lat"].values,
                    transform=ccrs.PlateCarree(),
                    fontsize=1.5,
                    spacing=0.5,
                    zorder=10,
                )

                # ‚ñ∂Ô∏è ‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏•‡∏°
                plot.plot_arrow(
                    np.nan_to_num(u_fixed.values),
                    np.nan_to_num(v_fixed.values),
                    scale=1.0,
                    scale_units="xy",
                    width=0.0005,
                    pivot="tail",
                    color="red",
                    # zorder=10,
                )

                # ‚ñ∂Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏•‡∏°
                plot.plot_text(
                    "S",
                    df["wnd"],
                    fontproperties=prop_bold,
                    fontsize=1.5,
                    color="red",
                    zorder=30,
                )

                self.main_window.textarea.append("‚úÖ Plot UpperWind - 2 ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏î‡πâ‡∏ß‡∏¢ MetPy")
            except Exception as e:
                self.main_window.textarea.append(f"‚ùå Plot UpperWind - 2 Error: {e}")
        except Exception as e:
            self.main_window.textarea.append(
                f"‚ùå Error in plot_uppePlot UpperWind - 2: {e}"
            )

        return self.figure, self.ax

    def save_pdf(self, figure, ax, output_file_path, dpi=400):
        try:
            # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©
            original_size = figure.get_size_inches()  # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô

            # ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏û‡∏¥‡∏°‡∏û‡πå
            # figure.set_size_inches(980 / 25.4, 760 / 25.4)  # ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å mm ‚Üí ‡∏ô‡∏¥‡πâ‡∏ß

            # ‚úÖ ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏ö 0.5 ‡∏ô‡∏¥‡πâ‡∏ß (‡∏ó‡∏±‡πâ‡∏á 4 ‡∏î‡πâ‡∏≤‡∏ô)
            # fig_width = figure.get_figwidth()
            # fig_height = figure.get_figheight()
            #
            # ax.set_position(
            #    [
            #        0.5 / fig_width,  # left
            #        0.5 / fig_height,  # bottom
            #        (fig_width - 1.0)
            #        / fig_width,  # width after removing 0.5 inch from left+right
            #        (fig_height - 0.0) / fig_height,  # height after removing top+bottom
            #    ]
            # )

            figure.savefig(
                output_file_path,
                transparent=True,
                format="pdf",
                dpi=dpi,
                bbox_inches=None,  # ‚úÖ ‡πÉ‡∏ä‡πâ None ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©
                metadata={"Creator": "KRiT KAi", "Title": f"‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏ô‡∏≤‡∏î ‡∏≠‡∏ï.‡∏ó‡∏≠. 1001"},
            )

            # figure.set_size_inches(original_size)  # ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å save

            # figure.savefig(
            #    output_file_path,
            #    format="pdf",
            #    dpi=400,  # ‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏π‡∏á
            #    transparent=True,
            #    bbox_inches=None,  # ‚úÖ ‡∏Ñ‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©
            #    metadata={
            #        "Title": "‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ‡∏≠‡∏ï.‡∏ó‡∏≠. 1001",
            #        "Creator": "PlotStation",
            #    },
            # )

            return output_file_path
        except Exception as e:
            self.main_window.textarea.append(f"Error saving PDF: {e}")
            return e

    def save_png(self, figure, output_file_path, dpi=400):
        """
        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå PNG ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏π‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå
        """
        try:
            # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û
            # original_size = figure.get_size_inches()  # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô
            #
            ## ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏û‡∏¥‡∏°‡∏û‡πå
            # figure.set_size_inches(980 / 25.4, 760 / 25.4)  # ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å mm ‚Üí ‡∏ô‡∏¥‡πâ‡∏ß
            #
            ## ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û
            # figure.savefig(
            #    output_file_path,
            #    format="png",
            #    dpi=dpi,
            #    bbox_inches=None,  # ‚úÖ ‡πÉ‡∏ä‡πâ None ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©
            #    transparent=True,  # ‚úÖ PNG ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
            # )
            # figure.set_size_inches(original_size)  # ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å save

            figure.savefig(
                output_file_path,
                format="png",
                dpi=400,  # ‚úÖ DPI ‡∏™‡∏π‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå
                transparent=True,
                bbox_inches=None,  # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô None ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏î‡∏Ç‡∏≠‡∏ö
            )

            return output_file_path
        except Exception as e:
            self.main_window.textarea.append(f"‚ùå Error saving PNG: {e}")
            return e

    def load_json(self, path):
        if not os.path.exists(path):
            self.main_window.textarea.append(f"‚ö†Ô∏è File not found: {path}")
            return []
        try:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            self.main_window.textarea.append(f"‚ö†Ô∏è Failed to load JSON: {e}")
            return []

    def write_json(self, path, data):
        try:
            with open(path, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=4)
            self.main_window.textarea.append(f"‚úÖ JSON saved successfully: {path}")
            return True
        except Exception as e:
            self.main_window.textarea.append(f"‚ùå Failed to write JSON: {e}")
            return False
