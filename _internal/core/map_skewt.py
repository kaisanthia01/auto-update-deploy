import datetime
import os
import json
from PIL import Image
from PySide6.QtCore import Qt, Signal, QThread
import fitz  # PyMuPDF ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ PDF
from PySide6.QtWidgets import (
    QGraphicsPixmapItem,
)
from PySide6.QtGui import QPixmap, QImage
from matplotlib import font_manager as fm

import logging

from core.skewt.PlotLine import PlotLine
from core.skewt.PlotMarker import PlotMarker
from core.skewt.PlotText import PlotText
from core.skewt.PlotWnd import PlotWnd

logger = logging.getLogger("MapSkewT")


class MapSkewT(QThread):
    text_update = Signal(str)  # ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á MainWindow
    finished = Signal(str)  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° signal finished ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á path ‡∏£‡∏π‡∏õ

    def __init__(self):
        super(MapSkewT, self).__init__()
        script_dir = os.path.dirname(os.path.abspath(__file__))  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå .py

        # ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Plot
        self.json_url_skewt_file = os.path.join(
            script_dir, "../data/json/synop_url_skewt.json"
        )

        self.json_data_skewt_file = os.path.join(
            script_dir, "../data/json/synop_data_skewt.json"
        )

        self.skewt_file = os.path.join(script_dir, "../data/pdf/Skew-T-Log-P-Color.pdf")
        self.doc = None  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF
        self.temp_file = None  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        self.temp_file_old = None  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤
        self.width = None  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
        self.height = None  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
        self.point_marker = None  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏∏‡∏î marker

    def run(self, date=None, time=None, station=None, level=None):
        try:
            script_dir = os.path.dirname(os.path.abspath(__file__))  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå .py

            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            output_file = os.path.join(script_dir, "../output/map/skewt.png")
            output_file_2 = os.path.join(script_dir, "../output/map/skewt-600dpi.png")
            output_file_3 = os.path.join(script_dir, "../output/map/pdf/skewt.pdf")

            # ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
            font_path = os.path.join(
                script_dir,
                "../fonts/Noto_Sans_Thai/static/NotoSansThai-Regular.ttf",
            )
            logger.info(f"üìú ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å: {font_path}")

            font = fm.FontProperties(fname=font_path)
            logger.info(f"üìõ ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤:{font.get_name()}")

            """‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û"""
            if not self.skewt_file or not os.path.exists(self.skewt_file):
                raise FileNotFoundError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå skewt: {self.skewt_file}")

            self.doc = fitz.open(self.skewt_file)  # ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå PDF
            page = self.doc[0]  # ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á PDF
            self.text_update.emit(f"üìÑ ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå PDF: {self.skewt_file}")
            logger.info(f"üìÑ ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå PDF: {self.skewt_file}")

            # ‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πâ‡∏≤ PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û
            self.image_item = QGraphicsPixmapItem()  # ‡∏™‡∏£‡πâ‡∏≤‡∏á item ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å PDF ‡∏î‡πâ‡∏ß‡∏¢ DPI ‡∏™‡∏π‡∏á (300)
            pix = page.get_pixmap(dpi=300)
            image = QImage(
                pix.samples,
                pix.width,
                pix.height,
                pix.stride,
                QImage.Format.Format_RGB888,
            )
            pixmap = QPixmap.fromImage(image)

            self.text_update.emit(f"üì∏ ‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πâ‡∏≤ PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û: {self.skewt_file}")
            logger.info(f"üì∏ ‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πâ‡∏≤ PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û: {self.skewt_file}")

            # === ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå PNG ===
            self.image_item.setPixmap(pixmap)  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á
            self.image_item.setTransformationMode(
                Qt.TransformationMode.SmoothTransformation
            )

            self.width = self.image_item.pixmap().width()
            self.height = self.image_item.pixmap().height()

            station_num = station[:5]
            station_name = station[7:11]

            try:
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                date_obj = datetime.datetime.strptime(date, "%d %b %Y")
                date_key = date_obj.strftime("%Y-%m-%d")
            except ValueError:
                self.text_update.emit(f"‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {date}")
                return

            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ skewt ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            json_url_skewt_file = self.load_json(self.json_url_skewt_file)
            if not json_url_skewt_file:
                self.text_update.emit("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• URL skewt")
                logger.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• URL skewt")
                return

            data_url = json_url_skewt_file[date_key][station[:5]]

            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ skewt ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            json_data_skewt_file = self.load_json(self.json_data_skewt_file)
            if not json_data_skewt_file:
                self.text_update.emit("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• skewt")
                logger.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• skewt")
                return

            data_skewt = json_data_skewt_file[date_key][station[:5]]
            try:
                # ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô CheckArrayWND
                plotText = PlotText()
                plotText.plotNewsDraw(
                    page,
                    self.width,
                    self.height,
                    station[:5],
                    station[7:11],
                    time,
                    date,
                    data_url["TTAA"],
                    data_url["TTBB"],
                )

                self.text_update.emit(f"‚úÖ PlotText Decoded Successfully")
                logger.info(f"‚úÖ PlotText Decoded Successfully")
            except Exception as e:
                self.append_debugger(f"‚ùå PlotText Decode Error: {e}")
                logger.error(f"‚ùå PlotText Decode Error: {e}")
                return

            try:
                # ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô PlotMarker
                plotMarker = PlotMarker()
                self.point_marker = plotMarker.plotMakerDraw(
                    page,
                    self.width,
                    self.height,
                    level,
                    data_skewt["TEMP"],
                )

                self.text_update.emit(f"‚úÖ PlotMarker Decoded Successfully")
                logger.info(f"‚úÖ PlotMarker Decoded Successfully")
            except Exception as e:
                self.append_debugger(f"‚ùå PlotMarker Decode Error: {e}")
                logger.error(f"‚ùå PlotMarker Decode Error: {e}")
                return

            try:
                # ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô PlotLine
                plotLine = PlotLine()
                plotLine.plotLineDraw(
                    page,
                    self.width,
                    self.height,
                    self.point_marker,
                )

                self.text_update.emit(f"‚úÖ PlotLine Decoded Successfully")
                logger.info(f"‚úÖ PlotLine Decoded Successfully")
            except Exception as e:
                self.append_debugger(f"‚ùå PlotLine Decode Error: {e}")
                logger.error(f"‚ùå PlotLine Decode Error: {e}")
                return

            try:
                # ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô PlotWnd
                plotWnd = PlotWnd()
                plotWnd.plotWndDraw(
                    page,
                    self.width,
                    self.height,
                    level,
                    data_skewt["WIND"],
                )

                self.text_update.emit(f"‚úÖ PlotWnd Decoded Successfully")
                logger.info(f"‚úÖ PlotWnd Decoded Successfully")
            except Exception as e:
                self.append_debugger(f"‚ùå PlotWnd Decode Error: {e}")
                logger.error(f"‚ùå PlotWnd Decode Error: {e}")
                return

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å PDF ‡πÉ‡∏´‡∏°‡πà
            user_profile = os.environ["USERPROFILE"]
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
            temp_folder = os.path.join(user_profile, "AppData", "Local", "Temp")
            self.temp_file = os.path.join(
                temp_folder,
                f"Skew-T-Temp-{station_num}-{time[0:4]}-{timestamp}.pdf",
            )

            # === ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå PNG ‡∏ó‡∏µ‡πà DPI 300 ===
            pix_300 = page.get_pixmap(dpi=300)
            pix_300.save(output_file)  # ‡πÑ‡∏°‡πà‡∏°‡∏µ "PNG" ‡πÄ‡∏õ‡πá‡∏ô argument, ‡πÅ‡∏Ñ‡πà‡πÉ‡∏™‡πà‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÉ‡∏ô path
            self.text_update.emit(f"üñºÔ∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û PNG ‡∏ó‡∏µ‡πà 300 DPI ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {output_file}")
            logger.info(f"üñºÔ∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û PNG ‡∏ó‡∏µ‡πà 300 DPI ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {output_file}")

            # === ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå PNG ‡∏ó‡∏µ‡πà DPI 600 ===
            # pix_600 = page.get_pixmap(dpi=600)
            # pix_600.save(output_file_2)
            # self.text_update.emit(f"üñºÔ∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û PNG ‡∏ó‡∏µ‡πà 600 DPI ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {output_file_2}")
            # logger.info(f"üñºÔ∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û PNG ‡∏ó‡∏µ‡πà 600 DPI ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {output_file_2}")

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF
            self.doc.save(output_file_3)
            self.doc.save(self.temp_file)
            self.doc.close()  # ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            self.text_update.emit(f"üìÑ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å PDF ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {self.temp_file}")
            logger.info(f"üìÑ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å PDF ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {self.temp_file}")

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
            img = Image.open(output_file)
            logger.info(f"üñºÔ∏è Dimensions: {img.size} px")
            logger.info(f"üñºÔ∏è DPI: {img.info.get('dpi')}")

            self.finished.emit(output_file)  # ‚úÖ ‡∏™‡πà‡∏á path ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
        except Exception as e:
            self.text_update.emit(f"‚ùå Error during map creation: {e}")
            logger.exception("Error during map creation")

    # === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏° ===
    def load_json(self, path):
        if not os.path.exists(path):
            self.text_update.emit(f"‚ö†Ô∏è File not found: {path}")
            return {}
        try:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            self.text_update.emit(f"‚ö†Ô∏è Failed to load JSON: {e}")
            return {}

    def write_json(self, path, data):
        try:
            with open(path, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=4)
            self.text_update.emit(f"‚úÖ JSON saved successfully: {path}")
            return True
        except Exception as e:
            self.text_update.emit(f"‚ùå Failed to write JSON: {e}")
            return False
