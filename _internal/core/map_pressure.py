import os
import json
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import numpy as np
import xarray as xr
import pandas as pd
import cartopy.io.shapereader as shpreader
import warnings
from cartopy.io import DownloadWarning
from metpy.plots import StationPlot
from metpy.calc import reduce_point_density
from metpy.plots.wx_symbols import (
    current_weather,
    sky_cover,
    low_clouds,
    mid_clouds,
    high_clouds,
)
from metpy.units import units  # üî• ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!
from pyproj import Transformer
from PySide6.QtCore import Signal, QThread
from cartopy.geodesic import Geodesic
from cartopy.feature import ShapelyFeature
import matplotlib.ticker as mticker
import re
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
from PIL import Image
from datetime import datetime
import logging

logger = logging.getLogger("MapPressure")


class MapPressure(QThread):
    text_update = Signal(str)  # ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á MainWindow
    finished = Signal(str)  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° signal finished ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á path ‡∏£‡∏π‡∏õ

    def __init__(self):
        super(MapPressure, self).__init__()
        self.figure = None
        self.ax = None
        self.font = None

        script_dir = os.path.dirname(os.path.abspath(__file__))  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå .py
        # ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
        self.json_station_world_file = os.path.join(
            script_dir, "../data/json/synop_station_world_list.json"
        )

        # ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Plot
        self.json_data_pressure_file = os.path.join(
            script_dir, "../data/json/synop_data_pressure.json"
        )

        # ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÅ‡∏•‡πâ‡∏ß
        self.json_data_plot_pressure_file = os.path.join(
            script_dir, "../data/json/synop_data_plot_pressure.json"
        )

    @staticmethod
    def safe_slice_int(s: str, start: int, end: int, default: int = 0) -> int:
        try:
            return int(s[start:end])
        except (ValueError, TypeError, IndexError):
            return default

    @staticmethod
    def safe_slice_float(
        s: str, start: int, end: int, scale: float = 1.0, default: float = 0.0
    ) -> float:
        try:
            return float(s[start:end]) * scale
        except (ValueError, TypeError, IndexError):
            return default

    def run(self, date=None, time=None, limit=None):
        try:
            map_name = "pressure"
            script_dir = os.path.dirname(os.path.abspath(__file__))  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå .py
            logo_path = os.path.join(script_dir, "../images/icons/sfc-2.png")
            output_file = os.path.join(script_dir, "../output/map/" + map_name + ".png")
            output_file_2 = os.path.join(
                script_dir, "../output/map/" + map_name + "-600dpi.png"
            )
            output_file_3 = os.path.join(
                script_dir, "../output/map/pdf/" + map_name + ".pdf"
            )
            output_file_4 = os.path.join(
                script_dir, "../output/map/" + map_name + "_645x505mm_300dpi.png"
            )

            # ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
            font_path = os.path.join(
                script_dir,
                "../fonts/Noto_Sans_Thai/static/NotoSansThai-Regular.ttf",
            )
            logger.info(f"üìú ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å: {font_path}")

            font = fm.FontProperties(fname=font_path)
            logger.info(f"üìõ ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤: {font.get_name()}")
            self.font = font  # ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô class

            # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
            paper_size = {"‡∏≠‡∏ï.‡∏ó‡∏≠.1010": (25.59, 20.47)}  # 650 √ó 520 mm

            # === ‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û ===
            dpi = 300
            dpi_2 = 600
            dpi_3 = 600
            width_px = 8000  # 7617
            height_px = 6000  # 5964
            width_in = width_px / dpi
            height_in = height_px / dpi

            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
            paper_key = "‡∏≠‡∏ï.‡∏ó‡∏≠.1010"  # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: "‡∏≠‡∏ï.‡∏ó‡∏≠.1003"
            logger.info(f"üìÑ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©: {paper_key}")

            # ‡∏î‡∏∂‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
            # if paper_key in paper_size:
            #    width_in, height_in = paper_size[paper_key]
            #    logger.info(f"üìè ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©: {width_in} x {height_in} ‡∏ô‡∏¥‡πâ‡∏ß")
            # else:
            #    logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©: {paper_key}")
            #    raise ValueError(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©: {paper_key}")

            # === ‡πÄ‡∏ß‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö ===
            margin_in = 0.15
            margin_x = margin_in / width_in
            margin_y = margin_in / height_in

            # === ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ===
            fig = plt.figure(figsize=(width_in, height_in), dpi=dpi)

            ax = fig.add_axes(
                [margin_x, margin_y, 1 - 2 * margin_x, 1 - 2 * margin_y],
                projection=ccrs.PlateCarree(),
            )

            # === ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏ß‡∏û‡∏∑‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
            # ‡∏ó‡∏¥‡∏®‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏∏‡πâ‡∏á 50 ‡∏≠‡∏á‡∏®‡∏≤‡πÄ‡∏´‡∏ô‡∏∑‡∏≠, ‡∏ó‡∏¥‡∏®‡πÉ‡∏ï‡πâ ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏∏‡πâ‡∏á -31 ‡∏≠‡∏á‡∏®‡∏≤‡πÉ‡∏ï‡πâ, ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ß‡∏á 160 ‡∏≠‡∏á‡∏®‡∏≤‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å, ‡∏ó‡∏¥‡∏®‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å ‡∏à‡∏£‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ß‡∏á 45 ‡∏≠‡∏á‡∏®‡∏≤‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å
            ax.set_extent([45.0, 160.0, -30.0, 50.0], crs=ccrs.PlateCarree())

            # === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
            cartopy_data_path = None
            if not cartopy_data_path:
                script_dir = os.path.dirname(os.path.abspath(__file__))  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå .py
                cartopy_data_path = os.path.join(script_dir, "../data/cartopy")

            # === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå shapefile ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            shapefiles_found = (
                any(
                    fname.endswith((".shp", ".dbf", ".shx"))
                    for fname in os.listdir(cartopy_data_path)
                )
                if os.path.isdir(cartopy_data_path)
                else False
            )

            # üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if shapefiles_found:
                os.environ["CARTOPY_USER_BACKGROUNDS"] = cartopy_data_path
                os.environ["CARTOPY_USER_SHAPEFILES"] = cartopy_data_path
                logger.info(f"üîé ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á: {cartopy_data_path}")
            else:
                logger.info("üîé ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏°‡∏û‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‚Üí ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏à‡∏≤‡∏Å Natural Earth")

            # === ‡πÅ‡∏¢‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏û‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
            if shapefiles_found:
                self._add_map_features(ax, cartopy_data_path)
            else:
                self._add_default_features(ax)

            # === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á polygon)
            self._add_thailand_borderline_only(ax, cartopy_data_path)

            # === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏¥‡∏î lat/lon
            self._add_inner_latlon_labels(ax)

            # === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Synoptic
            self._add_obs_map(ax, date, time, limit)

            # === ‡∏ß‡∏≤‡∏á‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ‡∏î‡πâ‡∏ß‡∏¢ ax.imshow()
            logo_img = Image.open(logo_path)

            # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ ~1 ‡∏ô‡∏¥‡πâ‡∏ß ‡∏Å‡∏ß‡πâ‡∏≤‡∏á
            logo_width_in = 1.0
            logo_width_px = int(logo_width_in * dpi)
            logo_height_px = int(logo_img.height * (logo_width_px / logo_img.width))
            logo_resized = logo_img.resize((logo_width_px, logo_height_px))
            logo_array = np.asarray(logo_resized)

            # ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡∏ß‡∏≤‡∏á (‡∏°‡∏∏‡∏°‡∏•‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢)
            logo_lon = 53.0
            logo_lat = -23.5

            # ‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏≠‡∏á‡∏®‡∏≤ (‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ)
            logo_width_deg = 4  # ‡πÄ‡∏î‡∏¥‡∏° 8 ‚Üí ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏£‡∏∂‡πà‡∏á
            logo_height_deg = logo_width_deg * (
                logo_resized.height / logo_resized.width
            )

            # ‡∏ß‡∏≤‡∏á‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ö‡∏ô‡πÅ‡∏Å‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
            ax.imshow(
                logo_array,
                extent=[
                    logo_lon,
                    logo_lon + logo_width_deg,
                    logo_lat,
                    logo_lat + logo_height_deg,
                ],
                transform=ccrs.PlateCarree(),
                zorder=10,
                interpolation="bicubic",
            )

            # === ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ===
            ax.text(
                55.0,  # ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î (Longitude)
                -26.0,  # ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î (Latitude)
                f"{date.upper()}",  # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                transform=ccrs.PlateCarree(),  # ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                fontsize=32,
                fontweight="bold",
                color="blue",
                ha="center",
                va="bottom",
                zorder=11,
            )

            # === ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ===
            ax.text(
                55.0,  # ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î (Longitude)
                -28.0,  # ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î (Latitude)
                f"{time[0:8]}",  # ‡πÄ‡∏ß‡∏•‡∏≤
                transform=ccrs.PlateCarree(),  # ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                fontsize=32,
                fontweight="bold",
                color="red",
                ha="center",
                va="bottom",
                zorder=11,
            )

            # === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ===
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î 53.0, ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î -29.75
            ax.text(
                45.09,  # ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î (Longitude)
                -29.91,  # ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î (Latitude)
                f"Date: {date} Time: {time[0:8]} | Pressure Change Map",  # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                transform=ccrs.PlateCarree(),  # ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                fontsize=3,  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                fontweight="bold",  # ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏≤
                color="black",  # ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                ha="left",  # ‡∏à‡∏±‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
                va="bottom",  # ‡∏à‡∏±‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
                bbox=dict(
                    facecolor="white",
                    edgecolor="black",
                    linewidth=0.8,
                    alpha=1,
                    boxstyle="square,pad=0.5",
                ),  # ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            )

            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ DPI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
            plt.rcParams["savefig.dpi"] = 600

            # === ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô PNG 300 dpi ===
            plt.savefig(output_file, dpi=dpi, bbox_inches="tight")

            # === ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô PNG ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á 600 dpi ===
            # plt.savefig(output_file_2, dpi=dpi_2, bbox_inches="tight")

            # === ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô PDF ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á 600 dpi ===
            plt.savefig(output_file_3, dpi=dpi_3, bbox_inches="tight")
            plt.close()

            self.text_update.emit(f"üñºÔ∏è {output_file}")
            # self.text_update.emit(f"üìÑ {output_file_3}")

            logger.info("üì∏ Map saved successfully")
            logger.info(f"üñºÔ∏è {output_file}")
            # logger.info(f"üñºÔ∏è {output_file_2}")
            # logger.info(f"üìú {output_file_3}")

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
            img = Image.open(output_file)
            logger.info(f"üñºÔ∏è Dimensions: {img.size} px")
            logger.info(f"üñºÔ∏è DPI: {img.info.get('dpi')}")

            # ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (645 x 505 mm ‡∏ó‡∏µ‡πà 300 DPI)
            target_size = (7617, 5964)

            # ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á
            resized_img = img.resize(target_size, Image.Resampling.LANCZOS)

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô PNG ‡∏û‡∏£‡πâ‡∏≠‡∏° DPI 300
            resized_img.save(output_file_4, dpi=(300, 300))

            self.finished.emit(output_file)  # ‚úÖ ‡∏™‡πà‡∏á path ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
        except Exception as e:
            self.text_update.emit(f"‚ùå Error during map creation: {e}")

    # === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏° ===
    def _add_map_features(self, ax, cartopy_data_path):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á, ‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô, ‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏∞‡πÄ‡∏•‡∏•‡∏á‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà"""
        self.text_update.emit("üó∫Ô∏è Downloading Map Features in local")
        boundary_path = os.path.join(
            cartopy_data_path, "ne_50m_admin_0_boundary_lines_land.shp"
        )
        coast_path = os.path.join(cartopy_data_path, "ne_50m_coastline.shp")
        countries_path = os.path.join(
            cartopy_data_path, "ne_110m_admin_0_countries.shp"
        )
        marine_path = os.path.join(
            cartopy_data_path, "ne_10m_geography_marine_polys.shp"
        )

        # ‚úÖ ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        ax.add_feature(cfeature.LAND, facecolor="none", alpha=0.1)  # ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô (‡∏™‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠)
        ax.add_feature(
            cfeature.OCEAN,
            facecolor="none",
            alpha=0.1,
        )  # ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏ô‡πâ‡∏≥ (‡πÄ‡∏á‡∏¥‡∏ô‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡πà‡∏≠‡∏ô)

        try:
            # ‚úÖ ‡∏û‡∏•‡πá‡∏≠‡∏ï‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô (BORDERS)
            if os.path.exists(boundary_path):
                borders = shpreader.Reader(boundary_path)
                ax.add_geometries(
                    borders.geometries(),
                    crs=ccrs.PlateCarree(),
                    edgecolor="#5f5f5f",
                    facecolor="none",
                    linewidth=2,
                    alpha=0.8,
                )
            else:
                ax.add_feature(
                    cfeature.BORDERS, linewidth=2, edgecolor="#5f5f5f", alpha=0.8
                )

        except Exception as e:
            logger.error(f"‚ùå Failed to add borders: {e}")

        try:
            # ‚úÖ ‡∏û‡∏•‡πá‡∏≠‡∏ï‡πÅ‡∏ô‡∏ß‡∏ä‡∏≤‡∏¢‡∏ù‡∏±‡πà‡∏á (COASTLINE)
            if os.path.exists(coast_path):
                coast = shpreader.Reader(coast_path)
                ax.add_geometries(
                    coast.geometries(),
                    crs=ccrs.PlateCarree(),
                    edgecolor="#5f5f5f",
                    facecolor="none",
                    linewidth=2,
                    alpha=0.8,
                )
            else:
                ax.add_feature(
                    cfeature.COASTLINE, linewidth=2, edgecolor="#5f5f5f", alpha=0.8
                )

        except Exception as e:
            logger.error(f"‚ùå Failed to add coastline: {e}")

        try:
            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
            west, east, south, north = ax.get_extent(ccrs.PlateCarree())

            # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà)
            if os.path.exists(countries_path):
                reader = shpreader.Reader(countries_path)
                for country in reader.records():
                    lon, lat = country.geometry.centroid.coords[0]
                    name = country.attributes["NAME"]

                    # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                    if west + 2 <= lon <= east - 2 and south <= lat <= north:
                        ax.text(
                            lon,
                            lat,
                            name,
                            fontsize=5,
                            ha="center",
                            clip_on=True,  # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¢‡∏Ç‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                            transform=ccrs.PlateCarree(),
                            color="grey",
                            alpha=0.5,
                        )

        except Exception as e:
            logger.error(f"‚ùå Failed to add country names: {e}")

        try:
            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
            west, east, south, north = ax.get_extent(ccrs.PlateCarree())

            # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏∞‡πÄ‡∏•, ‡∏≠‡πà‡∏≤‡∏ß, ‡πÅ‡∏•‡∏∞‡∏°‡∏´‡∏≤‡∏™‡∏°‡∏∏‡∏ó‡∏£
            if os.path.exists(marine_path):
                reader = shpreader.Reader(marine_path)
                for marine in reader.records():
                    lon, lat = marine.geometry.centroid.coords[0]

                    # ‚úÖ ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå keys ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏î‡∏π
                    # print(marine.attributes.keys())

                    # ‚úÖ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ key ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏∞‡πÄ‡∏•/‡∏≠‡πà‡∏≤‡∏ß
                    name = marine.attributes.get("NAME", "") or marine.attributes.get(
                        "name", ""
                    )

                    if name and west <= lon <= east and south <= lat <= north:
                        ax.text(
                            lon,
                            lat,
                            name,
                            fontsize=1.5,
                            alpha=0.3,
                            color="darkblue",
                            ha="center",
                            clip_on=True,  # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                            transform=ccrs.PlateCarree(),
                        )

        except Exception as e:
            logger.error(f"‚ùå Failed to add sea names: {e}")

    def _add_default_features(self, ax):
        self.text_update.emit("üåê Downloading Online Natural Earth")

        # ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
        logger.info(
            "üåê ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏°‡∏û‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‚Üí ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏à‡∏≤‡∏Å Natural Earth (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...)"
        )

        # ‡∏õ‡∏¥‡∏î‡πÅ‡∏™‡∏î‡∏á warning ‡∏ã‡πâ‡∏≥ ‡πÜ
        warnings.simplefilter("default", DownloadWarning)

        ax.add_feature(cfeature.BORDERS, linewidth=2, edgecolor="#5f5f5f", alpha=0.8)
        ax.add_feature(cfeature.COASTLINE, linewidth=2, edgecolor="#5f5f5f", alpha=0.8)

        # ‚úÖ ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        ax.add_feature(cfeature.LAND, facecolor="none")  # ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô (‡∏™‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠)
        ax.add_feature(cfeature.OCEAN, facecolor="none")  # ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏ô‡πâ‡∏≥ (‡πÄ‡∏á‡∏¥‡∏ô‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡πà‡∏≠‡∏ô)

    def _add_thailand_borderline_only(self, ax, cartopy_data_path):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á polygon)"""
        # ‡πÇ‡∏´‡∏•‡∏î shapefile ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
        shapefile_path = os.path.join(cartopy_data_path, "ne_50m_admin_0_countries.shp")

        # ‡∏™‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô
        color = "black"

        try:
            reader = shpreader.Reader(shapefile_path)

            thailand_shape = [
                record.geometry
                for record in reader.records()
                if record.attributes.get("NAME") == "Thailand"
            ]

            if thailand_shape:
                border = ShapelyFeature(
                    thailand_shape,
                    ccrs.PlateCarree(),
                    edgecolor=color,
                    facecolor="none",
                    linewidth=4,
                    zorder=6,
                    alpha=1,
                )
                ax.add_feature(border)
            else:
                logger.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô shapefile ‡∏ô‡∏µ‡πâ")

        except Exception as e:
            logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡∏°‡πÅ‡∏î‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢: {e}")

    def _add_inner_latlon_labels(self, ax):
        interval = 5
        color = "gray"
        fontsize = 7

        # ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏¥‡∏î (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
        gl = ax.gridlines(
            crs=ccrs.PlateCarree(),
            draw_labels=False,
            linewidth=0.5,
            color=color,
            alpha=0.5,
            linestyle="--",
            zorder=4,
        )
        gl.xlocator = mticker.MultipleLocator(interval)
        gl.ylocator = mticker.MultipleLocator(interval)

        # ‡∏î‡∏∂‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        extent = ax.get_extent(ccrs.PlateCarree())
        west, east, south, north = extent

        # ‡∏õ‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏£ interval ‡∏•‡∏á‡∏ï‡∏±‡∏ß
        def next_divisible_by(x, base):
            return x if x % base == 0 else x + (base - (x % base))

        lon_start = next_divisible_by(np.floor(west), interval)
        lat_start = next_divisible_by(np.floor(south), interval)

        lon_ticks = np.arange(lon_start, np.ceil(east) + interval, interval)
        lat_ticks = np.arange(lat_start, np.ceil(north) + interval, interval)

        # ‡∏£‡∏∞‡∏¢‡∏∞‡∏Ç‡∏¢‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö
        dx = (east - west) * 0.005
        dy = (north - south) * 0.015

        start = 1

        # ‡∏ß‡∏≤‡∏î label ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î (‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö)
        for lon in lon_ticks[start:-1]:
            if west <= lon <= east:
                y_pos = south + dy
                if south < y_pos < north:
                    label = (
                        f"{abs(int(round(lon)))}¬∞E"
                        if lon >= 0
                        else f"{abs(int(round(lon)))}¬∞W"
                    )
                    ax.text(
                        lon,
                        y_pos,
                        label,
                        fontsize=fontsize,
                        color="#AAAAAA",
                        ha="center",
                        va="bottom",
                        transform=ccrs.PlateCarree(),
                        # bbox=dict(facecolor="white", alpha=1.0, edgecolor="none"),
                        zorder=10,
                    )

        # ‡∏ß‡∏≤‡∏î label ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î (‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏ã‡πâ‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö)
        for lat in lat_ticks[start:-1]:
            if south <= lat <= north:
                x_pos = west + dx
                if west < x_pos < east:
                    label = (
                        f"{abs(int(round(lat)))}¬∞N"
                        if lat >= 0
                        else f"{abs(int(round(lat)))}¬∞S"
                    )
                    ax.text(
                        x_pos,
                        lat,
                        label,
                        fontsize=fontsize,
                        color="#AAAAAA",
                        ha="left",
                        va="center",
                        transform=ccrs.PlateCarree(),
                        # bbox=dict(facecolor="white", alpha=1.0, edgecolor="none"),
                        zorder=10,
                    )

    def _add_obs_map(self, ax, date=None, time=None, limit=None):
        try:
            self.text_update.emit("üü° Plot Pressure() Called")
            if not ax:
                self.text_update.emit("‚ùå Map not initialized")
                return

            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ pressure ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            data_synop = self.load_json(self.json_data_pressure_file)
            self.text_update.emit(
                f"üìÑ Loaded parsed pressure data: {len(data_synop)} entries"
            )

            data_station = self.load_json(self.json_station_world_file)
            self.text_update.emit(f"üìÑ Loaded stations: {len(data_station)} entries")

            if not data_synop or not data_station:
                self.text_update.emit("‚ùå Missing data file(s)")
                return ax

            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• synop ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô
            dates = sorted(
                {r.get("date") for r in data_synop if r.get("date")}, reverse=True
            )

            if len(dates) < 2:
                self.text_update.emit("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ß‡∏±‡∏ô")
                return ax

            latest_date = dates[0]
            previous_date = dates[1]
            self.text_update.emit(
                f"üìÜ Latest: {latest_date}, Previous: {previous_date}"
            )

            data_latest = [r for r in data_synop if r.get("date") == latest_date]
            data_previous = [r for r in data_synop if r.get("date") == previous_date]
            data_previous_dict = {r["station_id"]: r for r in data_previous}

            stations = []
            for record_today in data_latest:
                station_id = record_today.get("station_id")
                record_yesterday = data_previous_dict.get(station_id)
                if not record_yesterday:
                    continue

                station_info = next(
                    (s for s in data_station if s["station_id"] == station_id), None
                )
                if not station_info:
                    continue

                try:
                    pres_today = record_today.get("main", {}).get("4PPPP", "")
                    pres_yesterday = record_yesterday.get("main", {}).get("4PPPP", "")

                    if not (
                        pres_today.startswith("40") and pres_yesterday.startswith("40")
                    ):
                        continue

                    if len(pres_today) < 5 or len(pres_yesterday) < 5:
                        continue

                    def parse_pressure(p_str):
                        sub = p_str[2:5].replace("/", "0")
                        return 1000.0 + (int(sub) / 10.0) if sub.isdigit() else None

                    p_today = parse_pressure(pres_today)
                    p_yesterday = parse_pressure(pres_yesterday)

                    if p_today is None or p_yesterday is None:
                        continue

                    delta_p = round(p_today - p_yesterday, 1)

                    stations.append(
                        {
                            "station_id": station_id,
                            "lat": float(station_info["location"]["latitude"]),
                            "lon": float(station_info["location"]["longitude"]),
                            "pppp": delta_p,
                        }
                    )
                except Exception as e:
                    self.main_window.textarea.append(
                        f"‚ö†Ô∏è Parse error for station {station_id}: {e}"
                    )
                    continue

            # ‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
            self.write_json(self.json_data_plot_pressure_file, stations)
            self.text_update.emit(f"‚úÖ Parsed {len(stations)} stations")

            if not stations:
                self.text_update.emit("‚ùå No stations to plot")
                return ax

            # ‚ñ∂Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î
            df = pd.DataFrame(stations)
            transformer = Transformer.from_crs("EPSG:4326", "EPSG:3857", always_xy=True)
            df["x_meter"], df["y_meter"] = transformer.transform(
                df["lon"].values, df["lat"].values
            )

            # ‚ñ∂Ô∏è ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏à‡∏∏‡∏î
            point_locs = xr.DataArray(
                np.stack([df["x_meter"], df["y_meter"]], axis=-1),
                dims=("points", "space"),
                attrs={"crs": ccrs.PlateCarree()},
            )

            # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏à‡∏∏‡∏î
            limit = 50000.0 * ((100 - limit) / 30.0) * units.meter
            self.text_update.emit(f"‚ñ∂Ô∏è ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏à‡∏∏‡∏î: {limit:.0f}")

            # ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î/‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î (WGS84) ‚Üí ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏°‡∏ï‡∏£ (Web Mercator)
            mask = reduce_point_density(point_locs * units.meter, limit)

            # mask = reduce_point_density(
            #    point_locs * units.meter, 50000.0 * units.meter
            # )
            df = df[mask]

            # ‚ñ∂Ô∏è ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
            df = df[
                (df["lon"] >= 46.5)
                & (df["lon"] <= 159.5)
                & (df["lat"] >= -29.0)
                & (df["lat"] <= 48.8)
            ]

            if df.empty:
                self.text_update.emit("‚ùå No stations to plot")
                return ax

            try:
                self.text_update.emit("‚ñ∂Ô∏è Plot pressure ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏î‡πâ‡∏ß‡∏¢ MetPy")
                for i, row in df.iterrows():
                    value = row["pppp"]
                    color = (
                        "green"
                        if value == 0 or pd.isna(value)
                        else "red" if value < 0 else "blue"
                    )

                    text = f"{abs(value):.1f}" if pd.notna(value) else ""

                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á StationPlot ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ
                    single_plot = StationPlot(
                        ax,
                        [row["lon"]],
                        [row["lat"]],
                        transform=ccrs.PlateCarree(),
                        fontsize=5,
                        spacing=5.5,
                        zorder=10,
                    )

                    single_plot.plot_text(
                        "C",  # ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô (1, -1)
                        [text],
                        color=color,
                        fontweight="bold",
                        fontproperties=self.font,
                        fontsize=6,
                        zorder=10,
                    )

                self.text_update.emit("‚úÖ Plot Pressure ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏î‡πâ‡∏ß‡∏¢ MetPy")
            except Exception as e:
                self.text_update.emit(f"‚ùå Plot Pressure Error: {e}")
        except Exception as e:
            self.text_update.emit(f"‚ùå Unexpected error in Plot Pressure: {e}")

    def load_json(self, path):
        if not os.path.exists(path):
            self.text_update.emit(f"‚ö†Ô∏è File not found: {path}")
            return []
        try:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            self.text_update.emit(f"‚ö†Ô∏è Failed to load JSON: {e}")
            return []

    def write_json(self, path, data):
        try:
            with open(path, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=4)
            self.text_update.emit(f"‚úÖ JSON saved successfully: {path}")
            return True
        except Exception as e:
            self.text_update.emit(f"‚ùå Failed to write JSON: {e}")
            return False
