import io
import os
import sys
import logging
import subprocess
import urllib

from PySide6.QtWidgets import QMainWindow, QMessageBox
from PySide6.QtQuickWidgets import QQuickWidget
from PySide6.QtCore import Qt, QUrl, QTimer, Slot, QObject, Signal
from PySide6.QtGui import QColor

# === import ‡∏Ñ‡∏•‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ===
from core.auth_service import AuthService
from core.splash_sequence_manager import SplashSequenceManager
from ui.views.main_window import MainWindow
from ui.views.splash_window import SplashBridge, SplashWindow

# === ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠ logger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Login ===
logger = logging.getLogger("LoginWindow")

# === ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ===
LOCAL_VERSION_FILE = "version.txt"  # ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
REMOTE_VERSION_URL = "https://kaisanthia01.github.io/auto-update-deploy/version.txt"  # URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
AUTO_UPDATER_SCRIPT = "auto_updater.exe"  # ‡πÑ‡∏ü‡∏•‡πå .exe ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
APP_NAME = "auto_updater.exe"  # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Å‡πÅ‡∏•‡∏∞ kill ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà

# === ‡∏Ñ‡∏•‡∏≤‡∏™‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ QML ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô ===
class LoginWindow(QMainWindow):
    versionLoader = Signal(str)  # üîî ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ QML
    versionUpdate = Signal(bool)  # üîî ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

    def __init__(self):
        super().__init__()

        # === ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å ===
        self.setFixedSize(380, 420)
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)

        # === ‡πÇ‡∏´‡∏•‡∏î QML ‡∏•‡∏á QQuickWidget ===
        self.view = QQuickWidget()
        self.view.setResizeMode(QQuickWidget.SizeRootObjectToView)
        self.view.setClearColor(QColor(0, 0, 0, 0))
        self.setCentralWidget(self.view)

        # === ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° context ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Python ‚Üî QML ===
        self.handler = LoginHandler(self)
        ctx = self.view.rootContext()
        ctx.setContextProperty("loginHandler", self.handler)
        ctx.setContextProperty("loginWindow", self)
        ctx.setContextProperty("splashWindow", self)

        qml_path = os.path.abspath(
            os.path.join(os.path.dirname(__file__), "../../ui/qml/LoginWindow.qml")
        )
        self.view.setSource(QUrl.fromLocalFile(qml_path))
        logger.info(f"üìÑ ‡πÇ‡∏´‡∏•‡∏î QML ‡∏à‡∏≤‡∏Å: {qml_path}")

        if self.view.status() != QQuickWidget.Ready:
            logger.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î QML ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            for err in self.view.errors():
                logger.error("QML Error: %s", err.toString())
            QMessageBox.critical(self, "QML Load Error", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏î‡πâ")
            self.close()

        # === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ QML ===
        local_ver = get_local_version()
        remote_ver = get_remote_version()

        logger.info(f"üîç Local version: {local_ver}")
        logger.info(f"üåê Remote version: {remote_ver}")

        if remote_ver is None or local_ver == remote_ver:
            logger.info("‚úÖ ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡πá‡∏Å‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÑ‡∏î‡πâ")
            self.versionUpdate.emit(False)
        else:
            logger.info("‚¨ÜÔ∏è ‡∏û‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï")
            self.versionUpdate.emit(True)

        self.versionLoader.emit(local_ver)
        self.vName = local_ver

        # === ‡∏õ‡∏¥‡∏î auto_updater.exe ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ===
        #kill_app()

    # === ‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏•‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ ===
    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self._drag_pos = event.globalPosition().toPoint()

    def mouseMoveEvent(self, event):
        if event.buttons() & Qt.LeftButton and hasattr(self, "_drag_pos"):
            delta = event.globalPosition().toPoint() - self._drag_pos
            self.move(self.pos() + delta)
            self._drag_pos = event.globalPosition().toPoint()

    # === ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Splash ‡πÅ‡∏•‡∏∞ MainWindow ‡∏´‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ===
    def goto_main(self):
        logger.info("üßä ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á SplashWindow")
        splash_qml = os.path.abspath(
            os.path.join(os.path.dirname(__file__), "..", "qml/SplashWindow.qml")
        )
        self.splash_bridge = SplashBridge()
        self.splash = SplashWindow(splash_qml, self.splash_bridge)
        self.splash.show()
        self.hide()

        QTimer.singleShot(1200, self._load_main)

    def _load_main(self):
        self.sequence = SplashSequenceManager(self.splash_bridge)
        self.sequence.add_step("üöÄ Preparing UI...", 1000)
        self.sequence.add_step(
            "üì° Connecting to Meteorological Plotting System...", 1000
        )
        self.sequence.add_step("üîÑ Fetching Data...", 1000)
        self.sequence.add_step("‚úÖ Almost Ready...", 1000)
        self.sequence.start(on_done=self._show_main)

    def _show_main(self):
        logger.info("‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î MainWindow")
        self.main = MainWindow(self.splash_bridge, self.vName)
        self.sequence.add_step("üöÄ Launching Main window...", 1000)
        self.main.show()
        self.splash.close()

    # === Slot ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô ===
    @Slot()
    def updateVersion(self):
        logger.info("üîÅ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà")
        run_auto_updater()
        logger.info("üîÅ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å auto_updater.exe ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

# === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ===
def get_local_version():
    try:
        base_dir = os.path.abspath(
            os.path.join(
                os.path.dirname(__file__),
                "..",
                "..",
            )
        )
        version_path = os.path.join(base_dir, LOCAL_VERSION_FILE)
        logger.debug(f"‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å {version_path}")
        with open(version_path, "r") as f:
            return f.read().strip()
    except FileNotFoundError:
        return "0.0.0"


# === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å GitHub ===
def get_remote_version():
    try:
        logger.debug(f"‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ {REMOTE_VERSION_URL} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        with urllib.request.urlopen(REMOTE_VERSION_URL) as response:
            return response.read().decode().strip().replace("\ufeff", "")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡πá‡∏Å‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÑ‡∏î‡πâ: {e}")
        return None


# === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÅ‡∏ö‡∏ö‡πÄ‡∏á‡∏µ‡∏¢‡∏ö ===
def run_auto_updater():
    logger.info("üöÄ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô auto_updater.exe")
    try:
        result = subprocess.run(
            [AUTO_UPDATER_SCRIPT], check=True, creationflags=subprocess.CREATE_NO_WINDOW
        )
        return result.returncode == 0
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å auto updater ‡πÑ‡∏î‡πâ: {e}")
        return False


# === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ===
def is_app_running(app_name):
    try:
        result = subprocess.run(
            ["tasklist"],
            capture_output=True,
            text=True,
            check=True,
            creationflags=subprocess.CREATE_NO_WINDOW,
        )
        return app_name in result.stdout
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å tasklist ‡πÑ‡∏î‡πâ: {e}")
        return False


# === ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° auto_updater.exe ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ===
def kill_app():
    if is_app_running(APP_NAME):
        try:
            subprocess.run(
                ["taskkill", "/f", "/im", APP_NAME],
                check=True,
                creationflags=subprocess.CREATE_NO_WINDOW,
            )
            logger.info(f"‚úÖ ‡∏õ‡∏¥‡∏î {APP_NAME} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå ‡∏õ‡∏¥‡∏î {APP_NAME} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
    else:
        logger.info(f"üü¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö {APP_NAME} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î")


# === ‡∏Ñ‡∏•‡∏≤‡∏™‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö QML ===
class LoginHandler(QObject):
    def __init__(self, window):
        super().__init__()
        self.window = window
        self.auth = AuthService()

    # === Slot ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ QML ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô login ===
    @Slot(str, str)
    def login(self, username, password):
        logger.debug(f"login() called with user={username}")
        root = self.window.view.rootObject()

        # ‡∏´‡∏¢‡∏∏‡∏î spinner ‡πÉ‡∏ô QML
        def stop_spinner():
            if root:
                root.hideSpinner()
                logger.warning("‚úÖ ‡∏´‡∏¢‡∏∏‡∏î spinner ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            else:
                logger.warning("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö spinner ‡πÉ‡∏ô root")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
        if self.auth.authenticate_user(username, password):
            logger.info(f"‚úÖ ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {username}")
            stop_spinner()
            self.window.goto_main()
        else:
            logger.warning("‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            stop_spinner()
            if root:
                root.showError("‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")